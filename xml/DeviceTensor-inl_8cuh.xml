<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="DeviceTensor-inl_8cuh" kind="file" language="C++">
    <compoundname>DeviceTensor-inl.cuh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Facebook,<sp/>Inc.<sp/>and<sp/>its<sp/>affiliates.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;utility&gt;<sp/>//<sp/>std::move</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>faiss<sp/>{<sp/>namespace<sp/>gpu<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::DeviceTensor()<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::DeviceTensor(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;&amp;&amp;<sp/>t)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;operator=(std::move(t));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;&amp;</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::operator=(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;&amp;&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::operator=(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::move(t));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;reservation_<sp/>=<sp/>std::move(t.reservation_);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::~DeviceTensor()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::DeviceTensor(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GpuResources*<sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>AllocInfo&amp;<sp/>info,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>IndexT<sp/>sizes[Dim])<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;(nullptr,<sp/>sizes)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;reservation_<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::move(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res-&gt;allocMemoryHandle(AllocRequest(info,<sp/>this-&gt;getSizeInBytes())));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;data_<sp/>=<sp/>(T*)<sp/>reservation_.get();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>FAISS_ASSERT(this-&gt;data_<sp/>||<sp/>(this-&gt;getSizeInBytes()<sp/>==<sp/>0));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::DeviceTensor(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GpuResources*<sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>AllocInfo&amp;<sp/>info,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::initializer_list&lt;IndexT&gt;<sp/>sizes)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;(nullptr,<sp/>sizes)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;reservation_<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::move(res-&gt;allocMemoryHandle(AllocRequest(info,<sp/>this-&gt;getSizeInBytes())));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;data_<sp/>=<sp/>(T*)<sp/>reservation_.get();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>FAISS_ASSERT(this-&gt;data_<sp/>||<sp/>(this-&gt;getSizeInBytes()<sp/>==<sp/>0));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::DeviceTensor(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DataPtrType<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>IndexT<sp/>sizes[Dim])<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;(data,<sp/>sizes)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::DeviceTensor(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DataPtrType<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::initializer_list&lt;IndexT&gt;<sp/>sizes)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;(data,<sp/>sizes)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::DeviceTensor(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DataPtrType<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>IndexT<sp/>sizes[Dim],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>IndexT<sp/>strides[Dim])<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;(data,<sp/>sizes,<sp/>strides)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::DeviceTensor(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GpuResources*<sp/>res,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>AllocInfo&amp;<sp/>info,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;&amp;<sp/>t)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nullptr,<sp/>t.sizes(),<sp/>t.strides())<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;reservation_<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::move(res-&gt;allocMemoryHandle(AllocRequest(info,<sp/>this-&gt;getSizeInBytes())));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;data_<sp/>=<sp/>(T*)<sp/>reservation_.get();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>FAISS_ASSERT(this-&gt;data_<sp/>||<sp/>(this-&gt;getSizeInBytes()<sp/>==<sp/>0));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>this-&gt;copyFrom(t,<sp/>info.stream);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>int<sp/>Dim,<sp/>bool<sp/>InnerContig,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>IndexT,<sp/>template<sp/>&lt;typename<sp/>U&gt;<sp/>class<sp/>PtrTraits&gt;</highlight></codeline>
<codeline><highlight class="normal">__host__<sp/>DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;&amp;</highlight></codeline>
<codeline><highlight class="normal">DeviceTensor&lt;T,<sp/>Dim,<sp/>InnerContig,<sp/>IndexT,<sp/>PtrTraits&gt;::zero(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cudaStream_t<sp/>stream)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(this-&gt;data_)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Region<sp/>must<sp/>be<sp/>contiguous</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FAISS_ASSERT(this-&gt;isContiguous());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaMemsetAsync(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_,<sp/>0,<sp/>this-&gt;getSizeInBytes(),<sp/>stream));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>}<sp/>//<sp/>namespace</highlight></codeline>
    </programlisting>
    <location file="faiss/gpu/utils/DeviceTensor-inl.cuh"/>
  </compounddef>
</doxygen>
