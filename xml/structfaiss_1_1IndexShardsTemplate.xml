<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structfaiss_1_1IndexShardsTemplate" kind="struct" language="C++" prot="public">
    <compoundname>faiss::IndexShardsTemplate</compoundname>
    <basecompoundref prot="public" virt="non-virtual">ThreadedIndex&lt; IndexT &gt;</basecompoundref>
    <includes refid="IndexShards_8h" local="no">IndexShards.h</includes>
    <templateparamlist>
      <param>
        <type>typename IndexT</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfaiss_1_1IndexShardsTemplate_1a8d48a797bd827211a69c4f0a4cad1036" prot="public" static="no">
        <type>typename IndexT::idx_t</type>
        <definition>using faiss::IndexShardsTemplate&lt; IndexT &gt;::idx_t =  typename IndexT::idx_t</definition>
        <argsstring></argsstring>
        <name>idx_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="21" column="1" bodyfile="faiss/IndexShards.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1IndexShardsTemplate_1ada31784dde1b51d8be8b15288943c559" prot="public" static="no">
        <type>typename IndexT::component_t</type>
        <definition>using faiss::IndexShardsTemplate&lt; IndexT &gt;::component_t =  typename IndexT::component_t</definition>
        <argsstring></argsstring>
        <name>component_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="22" column="1" bodyfile="faiss/IndexShards.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1IndexShardsTemplate_1a94570791e9f70d2bef77d76564571417" prot="public" static="no">
        <type>typename IndexT::distance_t</type>
        <definition>using faiss::IndexShardsTemplate&lt; IndexT &gt;::distance_t =  typename IndexT::distance_t</definition>
        <argsstring></argsstring>
        <name>distance_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="23" column="1" bodyfile="faiss/IndexShards.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1IndexShardsTemplate_1aa79db16c723ae37eaf406e840e4f227a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::IndexShardsTemplate&lt; IndexT &gt;::successive_ids</definition>
        <argsstring></argsstring>
        <name>successive_ids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="94" column="1" bodyfile="faiss/IndexShards.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1a2ffc0edbce1815fae55cae188b83a5cf" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexShardsTemplate&lt; IndexT &gt;::IndexShardsTemplate</definition>
        <argsstring>(bool threaded=false, bool successive_ids=true)</argsstring>
        <name>IndexShardsTemplate</name>
        <param>
          <type>bool</type>
          <declname>threaded</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>successive_ids</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The dimension that all sub-indices must share will be the dimension of the first sub-index added</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threaded</parametername>
</parameternamelist>
<parameterdescription>
<para>do we use one thread per sub_index or do queries sequentially? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>successive_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>should we shift the returned ids by the size of each sub-index or return them as they are? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1ac278d8f7d54923cb034127a4257c56b7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexShardsTemplate&lt; IndexT &gt;::IndexShardsTemplate</definition>
        <argsstring>(idx_t d, bool threaded=false, bool successive_ids=true)</argsstring>
        <name>IndexShardsTemplate</name>
        <param>
          <type>idx_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threaded</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>successive_ids</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threaded</parametername>
</parameternamelist>
<parameterdescription>
<para>do we use one thread per sub_index or do queries sequentially? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>successive_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>should we shift the returned ids by the size of each sub-index or return them as they are? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1a0596f5ca67d6c9bfddae1465c5353b29" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexShardsTemplate&lt; IndexT &gt;::IndexShardsTemplate</definition>
        <argsstring>(int d, bool threaded=false, bool successive_ids=true)</argsstring>
        <name>IndexShardsTemplate</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>threaded</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>successive_ids</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>int version due to the implicit bool conversion ambiguity of int as dimension </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1a47a2e1f78d91025857f483be3eb6828a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexShardsTemplate&lt; IndexT &gt;::add_shard</definition>
        <argsstring>(IndexT *index)</argsstring>
        <name>add_shard</name>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for addIndex() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="59" column="1" bodyfile="faiss/IndexShards.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1ae0bff98885fecae6c42a474d05563ecd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexShardsTemplate&lt; IndexT &gt;::remove_shard</definition>
        <argsstring>(IndexT *index)</argsstring>
        <name>remove_shard</name>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Alias for removeIndex() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="64" column="1" bodyfile="faiss/IndexShards.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1a45647579ff21e0945d8a87a97ec705fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexShardsTemplate&lt; IndexT &gt;::add</definition>
        <argsstring>(idx_t n, const component_t *x) override</argsstring>
        <name>add</name>
        <param>
          <type>idx_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const component_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>supported only for sub-indices that implement add_with_ids </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1a15e0b4a2fd85f9345537d215a331ed91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexShardsTemplate&lt; IndexT &gt;::add_with_ids</definition>
        <argsstring>(idx_t n, const component_t *x, const idx_t *xids) override</argsstring>
        <name>add_with_ids</name>
        <param>
          <type>idx_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const component_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const idx_t *</type>
          <declname>xids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cases (successive_ids, xids):<itemizedlist>
<listitem><para>true, non-NULL ERROR: it makes no sense to pass in ids and request them to be shifted</para></listitem><listitem><para>true, NULL OK, but should be called only once (calls <ref refid="structfaiss_1_1IndexShardsTemplate_1a45647579ff21e0945d8a87a97ec705fe" kindref="member">add()</ref> on sub-indexes).</para></listitem><listitem><para>false, non-NULL OK: will call add_with_ids with passed in xids distributed evenly over shards</para></listitem><listitem><para>false, NULL OK: will call add_with_ids on each sub-index, starting at ntotal </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1ab3698d94a2c039f445115d52c4545640" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexShardsTemplate&lt; IndexT &gt;::search</definition>
        <argsstring>(idx_t n, const component_t *x, idx_t k, distance_t *distances, idx_t *labels) const override</argsstring>
        <name>search</name>
        <param>
          <type>idx_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const component_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>idx_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>distance_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>idx_t *</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1aa7d268a8a30e16f52e192d41a57b8626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexShardsTemplate&lt; IndexT &gt;::train</definition>
        <argsstring>(idx_t n, const component_t *x) override</argsstring>
        <name>train</name>
        <param>
          <type>idx_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const component_t *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1a7cd3a39d756000d2e64ba129be6e90d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexShardsTemplate&lt; IndexT &gt;::syncWithSubIndexes</definition>
        <argsstring>()</argsstring>
        <name>syncWithSubIndexes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronize the top-level index (IndexShards) with data in the sub-indices </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="98" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1a1d78dd47e9dc49488947e90dbc85e1ac" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexShardsTemplate&lt; IndexT &gt;::onAfterAddIndex</definition>
        <argsstring>(IndexT *index) override</argsstring>
        <name>onAfterAddIndex</name>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Called just after an index is added. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexShardsTemplate_1a0488d95e9d45e0cfab203c83e3a8e3c1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::IndexShardsTemplate&lt; IndexT &gt;::onAfterRemoveIndex</definition>
        <argsstring>(IndexT *index) override</argsstring>
        <name>onAfterRemoveIndex</name>
        <param>
          <type>IndexT *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Called just after an index is removed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="105" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> that concatenates the results from several sub-indexes </para>    </detaileddescription>
    <inheritancegraph>
      <node id="619">
        <label>faiss::IndexShardsTemplate&lt; IndexT &gt;</label>
        <link refid="structfaiss_1_1IndexShardsTemplate"/>
        <childnode refid="620" relation="public-inheritance">
        </childnode>
      </node>
      <node id="620">
        <label>ThreadedIndex&lt; IndexT &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="621">
        <label>faiss::IndexShardsTemplate&lt; IndexT &gt;</label>
        <link refid="structfaiss_1_1IndexShardsTemplate"/>
        <childnode refid="622" relation="public-inheritance">
        </childnode>
      </node>
      <node id="622">
        <label>ThreadedIndex&lt; IndexT &gt;</label>
      </node>
    </collaborationgraph>
    <location file="faiss/IndexShards.h" line="20" column="1" bodyfile="faiss/IndexShards.h" bodystart="20" bodyend="106"/>
    <listofallmembers>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a45647579ff21e0945d8a87a97ec705fe" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>add</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a47a2e1f78d91025857f483be3eb6828a" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>add_shard</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a15e0b4a2fd85f9345537d215a331ed91" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>add_with_ids</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1ada31784dde1b51d8be8b15288943c559" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>component_t</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a94570791e9f70d2bef77d76564571417" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>distance_t</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a8d48a797bd827211a69c4f0a4cad1036" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>idx_t</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a2ffc0edbce1815fae55cae188b83a5cf" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>IndexShardsTemplate</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1ac278d8f7d54923cb034127a4257c56b7" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>IndexShardsTemplate</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a0596f5ca67d6c9bfddae1465c5353b29" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>IndexShardsTemplate</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a1d78dd47e9dc49488947e90dbc85e1ac" prot="protected" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>onAfterAddIndex</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a0488d95e9d45e0cfab203c83e3a8e3c1" prot="protected" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>onAfterRemoveIndex</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1ae0bff98885fecae6c42a474d05563ecd" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>remove_shard</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1ab3698d94a2c039f445115d52c4545640" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>search</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1aa79db16c723ae37eaf406e840e4f227a" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>successive_ids</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1a7cd3a39d756000d2e64ba129be6e90d8" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>syncWithSubIndexes</name></member>
      <member refid="structfaiss_1_1IndexShardsTemplate_1aa7d268a8a30e16f52e192d41a57b8626" prot="public" virt="non-virtual"><scope>faiss::IndexShardsTemplate</scope><name>train</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
