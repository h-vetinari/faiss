<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classfaiss_1_1gpu_1_1GpuResources" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>faiss::gpu::GpuResources</compoundname>
    <derivedcompoundref refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl" prot="public" virt="non-virtual">faiss::gpu::StandardGpuResourcesImpl</derivedcompoundref>
    <includes refid="GpuResources_8h" local="no">GpuResources.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a979a487daf95fc077321e4cd8020278c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual faiss::gpu::GpuResources::~GpuResources</definition>
        <argsstring>()</argsstring>
        <name>~GpuResources</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a1f7f4e220ce279257e1daf929c3b0d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void faiss::gpu::GpuResources::initializeForDevice</definition>
        <argsstring>(int device)=0</argsstring>
        <name>initializeForDevice</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a5a7f41d69de7b8ec6b9b5d99cc39e86b">initializeForDevice</reimplementedby>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call to pre-allocate resources for a particular device. If this is not called, then resources will be allocated at the first time of demand </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1aa2682b8503dfdab4f7f5ef867035ad29" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>cublasHandle_t</type>
        <definition>virtual cublasHandle_t faiss::gpu::GpuResources::getBlasHandle</definition>
        <argsstring>(int device)=0</argsstring>
        <name>getBlasHandle</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a7a2b9d0db8057ec24a4acbdad5acf984">getBlasHandle</reimplementedby>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the cuBLAS handle that we use for the given device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a6c564198df6ba675920c993e2af34b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>cudaStream_t</type>
        <definition>virtual cudaStream_t faiss::gpu::GpuResources::getDefaultStream</definition>
        <argsstring>(int device)=0</argsstring>
        <name>getDefaultStream</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1ade7aa26366d1dae8b5eafc445bdbc465">getDefaultStream</reimplementedby>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the stream that we order all computation on for the given device </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1ac7a6bad94585904e17907844736165ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void faiss::gpu::GpuResources::setDefaultStream</definition>
        <argsstring>(int device, cudaStream_t stream)=0</argsstring>
        <name>setDefaultStream</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1aea675757238dda776033cd8607c6daef">setDefaultStream</reimplementedby>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overrides the default stream for a device to the user-supplied stream. The resources object does not own this stream (i.e., it will not destroy it). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1afb469bf3b107f43ef0d6abe4a014bb5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; cudaStream_t &gt;</type>
        <definition>virtual std::vector&lt;cudaStream_t&gt; faiss::gpu::GpuResources::getAlternateStreams</definition>
        <argsstring>(int device)=0</argsstring>
        <name>getAlternateStreams</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a098278ee17c5a58a385190da02ba8b08">getAlternateStreams</reimplementedby>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the set of alternative streams that we use for the given device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a4f29fea84dc03a44931d2e985ee39d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void *</type>
        <definition>virtual void* faiss::gpu::GpuResources::allocMemory</definition>
        <argsstring>(const AllocRequest &amp;req)=0</argsstring>
        <name>allocMemory</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1abfebafa768ef83db56488906fe57ed6c">allocMemory</reimplementedby>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1AllocRequest" kindref="compound">AllocRequest</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory management Returns an allocation from the given memory space, ordered with respect to the given stream (i.e., the first user will be a kernel in this stream). All allocations are sized internally to be the next highest multiple of 16 bytes, and all allocations returned are guaranteed to be 16 byte aligned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a0f444157f93f8c99cf1ce12591818d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void faiss::gpu::GpuResources::deallocMemory</definition>
        <argsstring>(int device, void *in)=0</argsstring>
        <name>deallocMemory</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a00d69ab624340410818c700b9019475d">deallocMemory</reimplementedby>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Returns a previous allocation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1abfad190786252900370003ed02b3f411" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>size_t</type>
        <definition>virtual size_t faiss::gpu::GpuResources::getTempMemoryAvailable</definition>
        <argsstring>(int device) const =0</argsstring>
        <name>getTempMemoryAvailable</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a633cfc45b53aa74156418ddc108c8167">getTempMemoryAvailable</reimplementedby>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For MemorySpace::Temporary, how much space is immediately available without cudaMalloc allocation? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1ad1b018745239e03d0044b659335c17a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::pair&lt; void *, size_t &gt;</type>
        <definition>virtual std::pair&lt;void*, size_t&gt; faiss::gpu::GpuResources::getPinnedMemory</definition>
        <argsstring>()=0</argsstring>
        <name>getPinnedMemory</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a86dea0d55d2ab7226f173e2ec998c6b4">getPinnedMemory</reimplementedby>
        <briefdescription>
<para>Returns the available CPU pinned memory buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a104b291ed4116033752144e90856c2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>cudaStream_t</type>
        <definition>virtual cudaStream_t faiss::gpu::GpuResources::getAsyncCopyStream</definition>
        <argsstring>(int device)=0</argsstring>
        <name>getAsyncCopyStream</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl_1a28beb152642c2621724c7eedb088630c">getAsyncCopyStream</reimplementedby>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the stream on which we perform async CPU &lt;-&gt; GPU copies. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a00cb7bcbc5f1a00da673f30749149b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cublasHandle_t</type>
        <definition>cublasHandle_t faiss::gpu::GpuResources::getBlasHandleCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getBlasHandleCurrentDevice</name>
        <briefdescription>
<para>Calls getBlasHandle with the current device. </para>        </briefdescription>
        <detaileddescription>
<para>Functions provided by default </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1aa0354aa570c24e17a9f8a6a45b153ed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaStream_t</type>
        <definition>cudaStream_t faiss::gpu::GpuResources::getDefaultStreamCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getDefaultStreamCurrentDevice</name>
        <briefdescription>
<para>Calls getDefaultStream with the current device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1aeb57bc66a9823aaf140324e22985a71d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::gpu::GpuResources::getTempMemoryAvailableCurrentDevice</definition>
        <argsstring>() const</argsstring>
        <name>getTempMemoryAvailableCurrentDevice</name>
        <briefdescription>
<para>Calls getTempMemoryAvailable with the current device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1af0949f87d4f522b7ee5be17ad760b266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1gpu_1_1GpuMemoryReservation" kindref="compound">GpuMemoryReservation</ref></type>
        <definition>GpuMemoryReservation faiss::gpu::GpuResources::allocMemoryHandle</definition>
        <argsstring>(const AllocRequest &amp;req)</argsstring>
        <name>allocMemoryHandle</name>
        <param>
          <type>const <ref refid="structfaiss_1_1gpu_1_1AllocRequest" kindref="compound">AllocRequest</ref> &amp;</type>
          <declname>req</declname>
        </param>
        <briefdescription>
<para>Returns a temporary memory allocation via a RAII object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a130deab9f6d49cbdde8f9da45ce868fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuResources::syncDefaultStream</definition>
        <argsstring>(int device)</argsstring>
        <name>syncDefaultStream</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Synchronizes the CPU with respect to the default stream for the given device </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1adf6a5653ec2bbb0e9d58a0e1dd73897f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::gpu::GpuResources::syncDefaultStreamCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>syncDefaultStreamCurrentDevice</name>
        <briefdescription>
<para>Calls syncDefaultStream for the current device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1a2104e59caebc31d9f98729281b616acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; cudaStream_t &gt;</type>
        <definition>std::vector&lt;cudaStream_t&gt; faiss::gpu::GpuResources::getAlternateStreamsCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getAlternateStreamsCurrentDevice</name>
        <briefdescription>
<para>Calls getAlternateStreams for the current device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classfaiss_1_1gpu_1_1GpuResources_1aefb90d15fade57cdfcff03ec800183d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaStream_t</type>
        <definition>cudaStream_t faiss::gpu::GpuResources::getAsyncCopyStreamCurrentDevice</definition>
        <argsstring>()</argsstring>
        <name>getAsyncCopyStreamCurrentDevice</name>
        <briefdescription>
<para>Calls getAsyncCopyStream for the current device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/gpu/GpuResources.h" line="251" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class of GPU-side resource provider; hides provision of cuBLAS handles, CUDA streams and all device memory allocation performed </para>    </detaileddescription>
    <inheritancegraph>
      <node id="248">
        <label>faiss::gpu::StandardGpuResourcesImpl</label>
        <link refid="classfaiss_1_1gpu_1_1StandardGpuResourcesImpl"/>
        <childnode refid="247" relation="public-inheritance">
        </childnode>
      </node>
      <node id="247">
        <label>faiss::gpu::GpuResources</label>
        <link refid="classfaiss_1_1gpu_1_1GpuResources"/>
      </node>
    </inheritancegraph>
    <location file="faiss/gpu/GpuResources.h" line="178" column="1" bodyfile="faiss/gpu/GpuResources.h" bodystart="178" bodyend="252"/>
    <listofallmembers>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a4f29fea84dc03a44931d2e985ee39d82" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>allocMemory</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1af0949f87d4f522b7ee5be17ad760b266" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuResources</scope><name>allocMemoryHandle</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a0f444157f93f8c99cf1ce12591818d3d" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>deallocMemory</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1afb469bf3b107f43ef0d6abe4a014bb5b" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>getAlternateStreams</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a2104e59caebc31d9f98729281b616acc" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuResources</scope><name>getAlternateStreamsCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a104b291ed4116033752144e90856c2e7" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>getAsyncCopyStream</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1aefb90d15fade57cdfcff03ec800183d4" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuResources</scope><name>getAsyncCopyStreamCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1aa2682b8503dfdab4f7f5ef867035ad29" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>getBlasHandle</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a00cb7bcbc5f1a00da673f30749149b12" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuResources</scope><name>getBlasHandleCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a6c564198df6ba675920c993e2af34b8c" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>getDefaultStream</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1aa0354aa570c24e17a9f8a6a45b153ed2" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuResources</scope><name>getDefaultStreamCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1ad1b018745239e03d0044b659335c17a8" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>getPinnedMemory</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1abfad190786252900370003ed02b3f411" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>getTempMemoryAvailable</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1aeb57bc66a9823aaf140324e22985a71d" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuResources</scope><name>getTempMemoryAvailableCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a1f7f4e220ce279257e1daf929c3b0d4e" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>initializeForDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1ac7a6bad94585904e17907844736165ec" prot="public" virt="pure-virtual"><scope>faiss::gpu::GpuResources</scope><name>setDefaultStream</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a130deab9f6d49cbdde8f9da45ce868fd" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuResources</scope><name>syncDefaultStream</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1adf6a5653ec2bbb0e9d58a0e1dd73897f" prot="public" virt="non-virtual"><scope>faiss::gpu::GpuResources</scope><name>syncDefaultStreamCurrentDevice</name></member>
      <member refid="classfaiss_1_1gpu_1_1GpuResources_1a979a487daf95fc077321e4cd8020278c" prot="public" virt="virtual"><scope>faiss::gpu::GpuResources</scope><name>~GpuResources</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
