<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacefaiss" kind="namespace" language="C++">
    <compoundname>faiss</compoundname>
    <innerclass refid="structfaiss_1_1AlignedTable" prot="public">faiss::AlignedTable</innerclass>
    <innerclass refid="structfaiss_1_1AlignedTableTightAlloc" prot="public">faiss::AlignedTableTightAlloc</innerclass>
    <innerclass refid="structfaiss_1_1ArrayInvertedLists" prot="public">faiss::ArrayInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1AutoTuneCriterion" prot="public">faiss::AutoTuneCriterion</innerclass>
    <innerclass refid="structfaiss_1_1BinaryInvertedListScanner" prot="public">faiss::BinaryInvertedListScanner</innerclass>
    <innerclass refid="structfaiss_1_1BitstringReader" prot="public">faiss::BitstringReader</innerclass>
    <innerclass refid="structfaiss_1_1BitstringWriter" prot="public">faiss::BitstringWriter</innerclass>
    <innerclass refid="structfaiss_1_1BlockInvertedLists" prot="public">faiss::BlockInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1BlockInvertedListsIOHook" prot="public">faiss::BlockInvertedListsIOHook</innerclass>
    <innerclass refid="structfaiss_1_1CenteringTransform" prot="public">faiss::CenteringTransform</innerclass>
    <innerclass refid="structfaiss_1_1Cloner" prot="public">faiss::Cloner</innerclass>
    <innerclass refid="structfaiss_1_1Clustering" prot="public">faiss::Clustering</innerclass>
    <innerclass refid="structfaiss_1_1ClusteringIterationStats" prot="public">faiss::ClusteringIterationStats</innerclass>
    <innerclass refid="structfaiss_1_1ClusteringParameters" prot="public">faiss::ClusteringParameters</innerclass>
    <innerclass refid="structfaiss_1_1CMax" prot="public">faiss::CMax</innerclass>
    <innerclass refid="structfaiss_1_1CMin" prot="public">faiss::CMin</innerclass>
    <innerclass refid="structfaiss_1_1DirectMap" prot="public">faiss::DirectMap</innerclass>
    <innerclass refid="structfaiss_1_1DirectMapAdd" prot="public">faiss::DirectMapAdd</innerclass>
    <innerclass refid="structfaiss_1_1FastScanStats" prot="public">faiss::FastScanStats</innerclass>
    <innerclass refid="structfaiss_1_1GenHammingComputer16" prot="public">faiss::GenHammingComputer16</innerclass>
    <innerclass refid="structfaiss_1_1GenHammingComputer32" prot="public">faiss::GenHammingComputer32</innerclass>
    <innerclass refid="structfaiss_1_1GenHammingComputer8" prot="public">faiss::GenHammingComputer8</innerclass>
    <innerclass refid="structfaiss_1_1GenHammingComputerM8" prot="public">faiss::GenHammingComputerM8</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer" prot="public">faiss::HammingComputer</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer16" prot="public">faiss::HammingComputer16</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer20" prot="public">faiss::HammingComputer20</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer32" prot="public">faiss::HammingComputer32</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer4" prot="public">faiss::HammingComputer4</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer64" prot="public">faiss::HammingComputer64</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputer8" prot="public">faiss::HammingComputer8</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputerDefault" prot="public">faiss::HammingComputerDefault</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputerM4" prot="public">faiss::HammingComputerM4</innerclass>
    <innerclass refid="structfaiss_1_1HammingComputerM8" prot="public">faiss::HammingComputerM8</innerclass>
    <innerclass refid="structfaiss_1_1HCounterState" prot="public">faiss::HCounterState</innerclass>
    <innerclass refid="structfaiss_1_1HeapArray" prot="public">faiss::HeapArray</innerclass>
    <innerclass refid="structfaiss_1_1HStackInvertedLists" prot="public">faiss::HStackInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1Index" prot="public">faiss::Index</innerclass>
    <innerclass refid="structfaiss_1_1Index2Layer" prot="public">faiss::Index2Layer</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinary" prot="public">faiss::IndexBinary</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryFlat" prot="public">faiss::IndexBinaryFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryFromFloat" prot="public">faiss::IndexBinaryFromFloat</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryHash" prot="public">faiss::IndexBinaryHash</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryHashStats" prot="public">faiss::IndexBinaryHashStats</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryHNSW" prot="public">faiss::IndexBinaryHNSW</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryIVF" prot="public">faiss::IndexBinaryIVF</innerclass>
    <innerclass refid="structfaiss_1_1IndexBinaryMultiHash" prot="public">faiss::IndexBinaryMultiHash</innerclass>
    <innerclass refid="structfaiss_1_1IndexFlat" prot="public">faiss::IndexFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexFlat1D" prot="public">faiss::IndexFlat1D</innerclass>
    <innerclass refid="structfaiss_1_1IndexFlatIP" prot="public">faiss::IndexFlatIP</innerclass>
    <innerclass refid="structfaiss_1_1IndexFlatL2" prot="public">faiss::IndexFlatL2</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSW" prot="public">faiss::IndexHNSW</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSW2Level" prot="public">faiss::IndexHNSW2Level</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSWFlat" prot="public">faiss::IndexHNSWFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSWPQ" prot="public">faiss::IndexHNSWPQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexHNSWSQ" prot="public">faiss::IndexHNSWSQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexIDMap2Template" prot="public">faiss::IndexIDMap2Template</innerclass>
    <innerclass refid="structfaiss_1_1IndexIDMapTemplate" prot="public">faiss::IndexIDMapTemplate</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVF" prot="public">faiss::IndexIVF</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFFlat" prot="public">faiss::IndexIVFFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFFlatDedup" prot="public">faiss::IndexIVFFlatDedup</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFPQ" prot="public">faiss::IndexIVFPQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFPQFastScan" prot="public">faiss::IndexIVFPQFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFPQR" prot="public">faiss::IndexIVFPQR</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFPQStats" prot="public">faiss::IndexIVFPQStats</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFScalarQuantizer" prot="public">faiss::IndexIVFScalarQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFSpectralHash" prot="public">faiss::IndexIVFSpectralHash</innerclass>
    <innerclass refid="structfaiss_1_1IndexIVFStats" prot="public">faiss::IndexIVFStats</innerclass>
    <innerclass refid="structfaiss_1_1IndexLattice" prot="public">faiss::IndexLattice</innerclass>
    <innerclass refid="structfaiss_1_1IndexLSH" prot="public">faiss::IndexLSH</innerclass>
    <innerclass refid="structfaiss_1_1IndexNNDescent" prot="public">faiss::IndexNNDescent</innerclass>
    <innerclass refid="structfaiss_1_1IndexNNDescentFlat" prot="public">faiss::IndexNNDescentFlat</innerclass>
    <innerclass refid="structfaiss_1_1IndexPQ" prot="public">faiss::IndexPQ</innerclass>
    <innerclass refid="structfaiss_1_1IndexPQFastScan" prot="public">faiss::IndexPQFastScan</innerclass>
    <innerclass refid="structfaiss_1_1IndexPQStats" prot="public">faiss::IndexPQStats</innerclass>
    <innerclass refid="structfaiss_1_1IndexPreTransform" prot="public">faiss::IndexPreTransform</innerclass>
    <innerclass refid="structfaiss_1_1IndexRefine" prot="public">faiss::IndexRefine</innerclass>
    <innerclass refid="structfaiss_1_1IndexRefineFlat" prot="public">faiss::IndexRefineFlat</innerclass>
    <innerclass refid="classfaiss_1_1IndexReplicasTemplate" prot="public">faiss::IndexReplicasTemplate</innerclass>
    <innerclass refid="structfaiss_1_1IndexScalarQuantizer" prot="public">faiss::IndexScalarQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1IndexShardsTemplate" prot="public">faiss::IndexShardsTemplate</innerclass>
    <innerclass refid="structfaiss_1_1IndexSplitVectors" prot="public">faiss::IndexSplitVectors</innerclass>
    <innerclass refid="structfaiss_1_1IntersectionCriterion" prot="public">faiss::IntersectionCriterion</innerclass>
    <innerclass refid="structfaiss_1_1InvertedLists" prot="public">faiss::InvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1InvertedListScanner" prot="public">faiss::InvertedListScanner</innerclass>
    <innerclass refid="structfaiss_1_1InvertedListsIOHook" prot="public">faiss::InvertedListsIOHook</innerclass>
    <innerclass refid="structfaiss_1_1ITQMatrix" prot="public">faiss::ITQMatrix</innerclass>
    <innerclass refid="structfaiss_1_1ITQTransform" prot="public">faiss::ITQTransform</innerclass>
    <innerclass refid="structfaiss_1_1IVFFastScanStats" prot="public">faiss::IVFFastScanStats</innerclass>
    <innerclass refid="structfaiss_1_1IVFPQSearchParameters" prot="public">faiss::IVFPQSearchParameters</innerclass>
    <innerclass refid="structfaiss_1_1IVFSearchParameters" prot="public">faiss::IVFSearchParameters</innerclass>
    <innerclass refid="structfaiss_1_1Level1Quantizer" prot="public">faiss::Level1Quantizer</innerclass>
    <innerclass refid="structfaiss_1_1LinearTransform" prot="public">faiss::LinearTransform</innerclass>
    <innerclass refid="structfaiss_1_1MaskedInvertedLists" prot="public">faiss::MaskedInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1MatrixStats" prot="public">faiss::MatrixStats</innerclass>
    <innerclass refid="structfaiss_1_1MultiIndexQuantizer" prot="public">faiss::MultiIndexQuantizer</innerclass>
    <innerclass refid="structfaiss_1_1MultiIndexQuantizer2" prot="public">faiss::MultiIndexQuantizer2</innerclass>
    <innerclass refid="structfaiss_1_1NormalizationTransform" prot="public">faiss::NormalizationTransform</innerclass>
    <innerclass refid="structfaiss_1_1OnDiskInvertedLists" prot="public">faiss::OnDiskInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1OnDiskInvertedListsIOHook" prot="public">faiss::OnDiskInvertedListsIOHook</innerclass>
    <innerclass refid="structfaiss_1_1OnDiskOneList" prot="public">faiss::OnDiskOneList</innerclass>
    <innerclass refid="structfaiss_1_1OneRecallAtRCriterion" prot="public">faiss::OneRecallAtRCriterion</innerclass>
    <innerclass refid="structfaiss_1_1OperatingPoint" prot="public">faiss::OperatingPoint</innerclass>
    <innerclass refid="structfaiss_1_1OperatingPoints" prot="public">faiss::OperatingPoints</innerclass>
    <innerclass refid="structfaiss_1_1OPQMatrix" prot="public">faiss::OPQMatrix</innerclass>
    <innerclass refid="structfaiss_1_1ParameterRange" prot="public">faiss::ParameterRange</innerclass>
    <innerclass refid="structfaiss_1_1ParameterSpace" prot="public">faiss::ParameterSpace</innerclass>
    <innerclass refid="structfaiss_1_1PartitionStats" prot="public">faiss::PartitionStats</innerclass>
    <innerclass refid="structfaiss_1_1PCAMatrix" prot="public">faiss::PCAMatrix</innerclass>
    <innerclass refid="structfaiss_1_1RandomGenerator" prot="public">faiss::RandomGenerator</innerclass>
    <innerclass refid="structfaiss_1_1RandomRotationMatrix" prot="public">faiss::RandomRotationMatrix</innerclass>
    <innerclass refid="structfaiss_1_1ReadOnlyInvertedLists" prot="public">faiss::ReadOnlyInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1ReconstructFromNeighbors" prot="public">faiss::ReconstructFromNeighbors</innerclass>
    <innerclass refid="structfaiss_1_1RemapDimensionsTransform" prot="public">faiss::RemapDimensionsTransform</innerclass>
    <innerclass refid="structfaiss_1_1simd16uint16" prot="public">faiss::simd16uint16</innerclass>
    <innerclass refid="structfaiss_1_1simd256bit" prot="public">faiss::simd256bit</innerclass>
    <innerclass refid="structfaiss_1_1simd32uint8" prot="public">faiss::simd32uint8</innerclass>
    <innerclass refid="structfaiss_1_1simd8float32" prot="public">faiss::simd8float32</innerclass>
    <innerclass refid="structfaiss_1_1simd8uint32" prot="public">faiss::simd8uint32</innerclass>
    <innerclass refid="structfaiss_1_1SliceInvertedLists" prot="public">faiss::SliceInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1StopWordsInvertedLists" prot="public">faiss::StopWordsInvertedLists</innerclass>
    <innerclass refid="structfaiss_1_1VectorTransform" prot="public">faiss::VectorTransform</innerclass>
    <innerclass refid="structfaiss_1_1VStackInvertedLists" prot="public">faiss::VStackInvertedLists</innerclass>
    <innerclass refid="classfaiss_1_1WorkerThread" prot="public">faiss::WorkerThread</innerclass>
    <innernamespace refid="namespacefaiss_1_1gpu">faiss::gpu</innernamespace>
    <innernamespace refid="namespacefaiss_1_1ivflib">faiss::ivflib</innernamespace>
    <innernamespace refid="namespacefaiss_1_1quantize__lut">faiss::quantize_lut</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacefaiss_1afd12191c638da74760ff397cf319752c" prot="public" static="no">
        <name>MetricType</name>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca96ba216fbb3b4e586edf26637d61c7b2" prot="public">
          <name>METRIC_INNER_PRODUCT</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>maximum inner product search </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752cace9aa175fe11f346aa0a70df58977ff1" prot="public">
          <name>METRIC_L2</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>squared L2 search </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752cad1ccd4c5874f8d03f77227b40e4777df" prot="public">
          <name>METRIC_L1</name>
          <briefdescription>
<para>L1 (aka cityblock) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca6eefdfaded6b0f0c51ed3a91acff01c3" prot="public">
          <name>METRIC_Linf</name>
          <briefdescription>
<para>infinity distance </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca948cb1a3b5ec11c028c0be6a5dbd908c" prot="public">
          <name>METRIC_Lp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>L_p distance, p is given by a <ref refid="structfaiss_1_1Index" kindref="compound">faiss::Index</ref> metric_arg </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752caf4e931a0d14ac0d0acd8cc74504df12a" prot="public">
          <name>METRIC_Canberra</name>
          <initializer>= 20</initializer>
          <briefdescription>
<para>some additional metrics defined in scipy.spatial.distance </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752caeaa8e44a2c8ecdc7a84a9d052da8b9ea" prot="public">
          <name>METRIC_BrayCurtis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefaiss_1afd12191c638da74760ff397cf319752ca0ed6b1105d1f075fb996657320bed012" prot="public">
          <name>METRIC_JensenShannon</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The metric space for vector comparison for Faiss indices and algorithms.</para><para>Most algorithms support both inner product and L2, with the flat (brute-force) indices supporting additional metric types for vector comparison. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/MetricType.h" line="20" column="1" bodyfile="faiss/MetricType.h" bodystart="20" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacefaiss_1af3735e1903da947aaa2d79389d4ddfd0" prot="public" static="no">
        <type><ref refid="classfaiss_1_1IndexReplicasTemplate" kindref="compound">IndexReplicasTemplate</ref>&lt; <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>using faiss::IndexReplicas = typedef IndexReplicasTemplate&lt;Index&gt;</definition>
        <argsstring></argsstring>
        <name>IndexReplicas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="85" column="1" bodyfile="faiss/IndexReplicas.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a08035b3de4260d681099add5203fc045" prot="public" static="no">
        <type><ref refid="classfaiss_1_1IndexReplicasTemplate" kindref="compound">IndexReplicasTemplate</ref>&lt; <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &gt;</type>
        <definition>using faiss::IndexBinaryReplicas = typedef IndexReplicasTemplate&lt;IndexBinary&gt;</definition>
        <argsstring></argsstring>
        <name>IndexBinaryReplicas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexReplicas.h" line="86" column="1" bodyfile="faiss/IndexReplicas.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1aa4027ffe4b83be8ed0ad09c287853d17" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexShardsTemplate" kindref="compound">IndexShardsTemplate</ref>&lt; <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>using faiss::IndexShards = typedef IndexShardsTemplate&lt;Index&gt;</definition>
        <argsstring></argsstring>
        <name>IndexShards</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="108" column="1" bodyfile="faiss/IndexShards.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a1e3dccddbd9b1cbe722804bbb9b2fa99" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexShardsTemplate" kindref="compound">IndexShardsTemplate</ref>&lt; <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &gt;</type>
        <definition>using faiss::IndexBinaryShards = typedef IndexShardsTemplate&lt;IndexBinary&gt;</definition>
        <argsstring></argsstring>
        <name>IndexBinaryShards</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexShards.h" line="109" column="1" bodyfile="faiss/IndexShards.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a6e5511ff3f78bfcab1530a6f215846c6" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HStackInvertedLists" kindref="compound">HStackInvertedLists</ref></type>
        <definition>using faiss::ConcatenatedInvertedLists = typedef HStackInvertedLists</definition>
        <argsstring></argsstring>
        <name>ConcatenatedInvertedLists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/InvertedLists.h" line="269" column="1" bodyfile="faiss/invlists/InvertedLists.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a73b36a88d6db5db6a15d165150e54348" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexIDMapTemplate" kindref="compound">IndexIDMapTemplate</ref>&lt; <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>using faiss::IndexIDMap = typedef IndexIDMapTemplate&lt;Index&gt;</definition>
        <argsstring></argsstring>
        <name>IndexIDMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/MetaIndexes.h" line="68" column="1" bodyfile="faiss/MetaIndexes.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a0fcd5b438dc8ed29fe802c9f86b5ed03" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexIDMapTemplate" kindref="compound">IndexIDMapTemplate</ref>&lt; <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &gt;</type>
        <definition>using faiss::IndexBinaryIDMap = typedef IndexIDMapTemplate&lt;IndexBinary&gt;</definition>
        <argsstring></argsstring>
        <name>IndexBinaryIDMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/MetaIndexes.h" line="69" column="1" bodyfile="faiss/MetaIndexes.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1aa08ba3d567937ac89a8a7e96ede18bc2" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexIDMap2Template" kindref="compound">IndexIDMap2Template</ref>&lt; <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> &gt;</type>
        <definition>using faiss::IndexIDMap2 = typedef IndexIDMap2Template&lt;Index&gt;</definition>
        <argsstring></argsstring>
        <name>IndexIDMap2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/MetaIndexes.h" line="97" column="1" bodyfile="faiss/MetaIndexes.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1abb449fb7eb62ff35c48165c965621d10" prot="public" static="no">
        <type><ref refid="structfaiss_1_1IndexIDMap2Template" kindref="compound">IndexIDMap2Template</ref>&lt; <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> &gt;</type>
        <definition>using faiss::IndexBinaryIDMap2 = typedef IndexIDMap2Template&lt;IndexBinary&gt;</definition>
        <argsstring></argsstring>
        <name>IndexBinaryIDMap2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/MetaIndexes.h" line="98" column="1" bodyfile="faiss/MetaIndexes.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1ae0c5f7d2638acf960a3b98e7fd8c1167" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">HeapArray</ref>&lt; <ref refid="structfaiss_1_1CMin" kindref="compound">CMin</ref>&lt; float, int64_t &gt; &gt;</type>
        <definition>typedef HeapArray&lt;CMin&lt;float, int64_t&gt; &gt; faiss::float_minheap_array_t</definition>
        <argsstring></argsstring>
        <name>float_minheap_array_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="412" column="1" bodyfile="faiss/utils/Heap.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a17c03ceef680b86f30abf40c359f0b6c" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">HeapArray</ref>&lt; <ref refid="structfaiss_1_1CMin" kindref="compound">CMin</ref>&lt; int, int64_t &gt; &gt;</type>
        <definition>typedef HeapArray&lt;CMin&lt;int, int64_t&gt; &gt; faiss::int_minheap_array_t</definition>
        <argsstring></argsstring>
        <name>int_minheap_array_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="413" column="1" bodyfile="faiss/utils/Heap.h" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a3d829413dc05d84f9564a4fa8d831456" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">HeapArray</ref>&lt; <ref refid="structfaiss_1_1CMax" kindref="compound">CMax</ref>&lt; float, int64_t &gt; &gt;</type>
        <definition>typedef HeapArray&lt;CMax&lt;float, int64_t&gt; &gt; faiss::float_maxheap_array_t</definition>
        <argsstring></argsstring>
        <name>float_maxheap_array_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="415" column="1" bodyfile="faiss/utils/Heap.h" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefaiss_1a4bd3ab42c7aaf074f798553a68eacd52" prot="public" static="no">
        <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">HeapArray</ref>&lt; <ref refid="structfaiss_1_1CMax" kindref="compound">CMax</ref>&lt; int, int64_t &gt; &gt;</type>
        <definition>typedef HeapArray&lt;CMax&lt;int, int64_t&gt; &gt; faiss::int_maxheap_array_t</definition>
        <argsstring></argsstring>
        <name>int_maxheap_array_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="416" column="1" bodyfile="faiss/utils/Heap.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacefaiss_1aa75d478d14ec1ffd7b0718adf0dab26b" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_READ_ONLY</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_READ_ONLY</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="47" column="1" bodyfile="faiss/index_io.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a0afd2e723c83893be7aff1fa644d13b3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_ONDISK_SAME_DIR</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_ONDISK_SAME_DIR</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="50" column="1" bodyfile="faiss/index_io.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1af2f70735b00d2defcffa4c051830fd9f" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_SKIP_IVF_DATA</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_SKIP_IVF_DATA</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="52" column="1" bodyfile="faiss/index_io.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1aff97660fb0994bea32b9c4714e324fa0" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int faiss::IO_FLAG_MMAP</definition>
        <argsstring></argsstring>
        <name>IO_FLAG_MMAP</name>
        <initializer>= IO_FLAG_SKIP_IVF_DATA | 0x646f0000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="55" column="1" bodyfile="faiss/index_io.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a308343dfd91ddc2dad5d62c9fa79a65e" prot="public" static="no" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IndexBinaryHashStats" kindref="compound">IndexBinaryHashStats</ref></type>
        <definition>FAISS_API IndexBinaryHashStats faiss::indexBinaryHash_stats</definition>
        <argsstring></argsstring>
        <name>indexBinaryHash_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexBinaryHash.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a28374b20fb3fd40e3abc21c78135c3a7" prot="public" static="no" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IndexIVFStats" kindref="compound">IndexIVFStats</ref></type>
        <definition>FAISS_API IndexIVFStats faiss::indexIVF_stats</definition>
        <argsstring></argsstring>
        <name>indexIVF_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVF.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a4597bfef2dd25b76afe4a11f63aaf168" prot="public" static="no" mutable="no">
        <type>FAISS_API size_t</type>
        <definition>FAISS_API size_t faiss::precomputed_table_max_bytes</definition>
        <argsstring></argsstring>
        <name>precomputed_table_max_bytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVFPQ.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1ae040bf76054f16979b15559f8ffc5727" prot="public" static="no" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IndexIVFPQStats" kindref="compound">IndexIVFPQStats</ref></type>
        <definition>FAISS_API IndexIVFPQStats faiss::indexIVFPQ_stats</definition>
        <argsstring></argsstring>
        <name>indexIVFPQ_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVFPQ.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a3aebb977a33e268e5eddf7ad361598f9" prot="public" static="no" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IVFFastScanStats" kindref="compound">IVFFastScanStats</ref></type>
        <definition>FAISS_API IVFFastScanStats faiss::IVFFastScan_stats</definition>
        <argsstring></argsstring>
        <name>IVFFastScan_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVFPQFastScan.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a386cc28ead8e63ddabac9f1f9be8ff7e" prot="public" static="no" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1IndexPQStats" kindref="compound">IndexPQStats</ref></type>
        <definition>FAISS_API IndexPQStats faiss::indexPQ_stats</definition>
        <argsstring></argsstring>
        <name>indexPQ_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexPQ.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a740c0ca147e528a2d7913acad0fc9bc3" prot="public" static="no" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1FastScanStats" kindref="compound">FastScanStats</ref></type>
        <definition>FAISS_API FastScanStats faiss::FastScan_stats</definition>
        <argsstring></argsstring>
        <name>FastScan_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexPQFastScan.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a9875918581ad243ce5483a090c9da918" prot="public" static="no" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::distance_compute_blas_threshold</definition>
        <argsstring></argsstring>
        <name>distance_compute_blas_threshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a70eb5be4a6af3b9d948bcb8f949a4e9f" prot="public" static="no" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::distance_compute_blas_query_bs</definition>
        <argsstring></argsstring>
        <name>distance_compute_blas_query_bs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1acbd29d880c5aeaf1caf6266483253953" prot="public" static="no" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::distance_compute_blas_database_bs</definition>
        <argsstring></argsstring>
        <name>distance_compute_blas_database_bs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a5ba348773d3fc46e3ea6f668c70bade1" prot="public" static="no" mutable="no">
        <type>FAISS_API int</type>
        <definition>FAISS_API int faiss::distance_compute_min_k_reservoir</definition>
        <argsstring></argsstring>
        <name>distance_compute_min_k_reservoir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a7d8fdd4c4c76390042cc6916bdbe6b9e" prot="public" static="no" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t faiss::hamdis_tab_ham_bytes[256]</definition>
        <argsstring>[256]</argsstring>
        <name>hamdis_tab_ham_bytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming-inl.h" line="10" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1a1c1a7ffff3e34768b027b77d0d9f96df" prot="public" static="no" mutable="no">
        <type>FAISS_API size_t</type>
        <definition>FAISS_API size_t faiss::hamming_batch_size</definition>
        <argsstring></argsstring>
        <name>hamming_batch_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefaiss_1ae2bb09d8026f83d03936dcddee878a04" prot="public" static="no" mutable="no">
        <type>FAISS_API <ref refid="structfaiss_1_1PartitionStats" kindref="compound">PartitionStats</ref></type>
        <definition>FAISS_API PartitionStats faiss::partition_stats</definition>
        <argsstring></argsstring>
        <name>partition_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="72" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacefaiss_1a71dedb2a0d42fcaf8348a30112401069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index* faiss::clone_index</definition>
        <argsstring>(const Index *)</argsstring>
        <name>clone_index</name>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/clone_index.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a38bd0dde8a1b229201a5fcb64d05daa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::kmeans_clustering</definition>
        <argsstring>(size_t d, size_t n, size_t k, const float *x, float *centroids)</argsstring>
        <name>kmeans_clustering</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>centroids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>simplified interface</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of training vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of output centroids </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>training set (size n * d) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>centroids</parametername>
</parameternamelist>
<parameterdescription>
<para>output centroids (size k * d) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>final quantization error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Clustering.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aca8ad1aa3df4582ddb46b41db8285b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index* faiss::index_factory</definition>
        <argsstring>(int d, const char *description, MetricType metric=METRIC_L2)</argsstring>
        <name>index_factory</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>metric</declname>
          <defval><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752cace9aa175fe11f346aa0a70df58977ff1" kindref="member">METRIC_L2</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build and index with the sequence of processing steps described in the string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_factory.h" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a550ef4d89215226f02adad8f161457cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary* faiss::index_binary_factory</definition>
        <argsstring>(int d, const char *description)</argsstring>
        <name>index_binary_factory</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_factory.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa41490abaa2dad0dd2131150ed99ef8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index</definition>
        <argsstring>(const Index *idx, const char *fname)</argsstring>
        <name>write_index</name>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1add675e330da6a82b27101862206de6c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index</definition>
        <argsstring>(const Index *idx, FILE *f)</argsstring>
        <name>write_index</name>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a3a8129dcbf07c731ae1b3fbb6ed7df73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index</definition>
        <argsstring>(const Index *idx, IOWriter *writer)</argsstring>
        <name>write_index</name>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>IOWriter *</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a61da4238a64561284de20324b93314bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index_binary</definition>
        <argsstring>(const IndexBinary *idx, const char *fname)</argsstring>
        <name>write_index_binary</name>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a2ac354e079e69777c2a3f4ce205372ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index_binary</definition>
        <argsstring>(const IndexBinary *idx, FILE *f)</argsstring>
        <name>write_index_binary</name>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af2b88a1a1d4ac1d78493f085cacfb456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_index_binary</definition>
        <argsstring>(const IndexBinary *idx, IOWriter *writer)</argsstring>
        <name>write_index_binary</name>
        <param>
          <type>const <ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>IOWriter *</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9f92542b9b15adc994f54ef6b3902af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index* faiss::read_index</definition>
        <argsstring>(const char *fname, int io_flags=0)</argsstring>
        <name>read_index</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac275376d59e3a50eec08c6ea47cc0e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index* faiss::read_index</definition>
        <argsstring>(FILE *f, int io_flags=0)</argsstring>
        <name>read_index</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a5f7757d2c9efb4b33e03adf392338a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
        <definition>Index* faiss::read_index</definition>
        <argsstring>(IOReader *reader, int io_flags=0)</argsstring>
        <name>read_index</name>
        <param>
          <type>IOReader *</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af6c571991d95301f78487c231ffade57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary* faiss::read_index_binary</definition>
        <argsstring>(const char *fname, int io_flags=0)</argsstring>
        <name>read_index_binary</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a38d8255e46b834d2ca23bc926c1fbb6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary* faiss::read_index_binary</definition>
        <argsstring>(FILE *f, int io_flags=0)</argsstring>
        <name>read_index_binary</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abfceef97b9853955e1e81d922076001c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref> *</type>
        <definition>IndexBinary* faiss::read_index_binary</definition>
        <argsstring>(IOReader *reader, int io_flags=0)</argsstring>
        <name>read_index_binary</name>
        <param>
          <type>IOReader *</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad72efd9404a8058159f1ae48225a2d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_VectorTransform</definition>
        <argsstring>(const VectorTransform *vt, const char *fname)</argsstring>
        <name>write_VectorTransform</name>
        <param>
          <type>const <ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref> *</type>
          <declname>vt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a220b5d46772f1659de69061c976916f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1VectorTransform" kindref="compound">VectorTransform</ref> *</type>
        <definition>VectorTransform* faiss::read_VectorTransform</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>read_VectorTransform</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a424578a3c798b4f0deb428ca777882b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ProductQuantizer *</type>
        <definition>ProductQuantizer* faiss::read_ProductQuantizer</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>read_ProductQuantizer</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a744fe50a3410862d1c282f0c8d779231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ProductQuantizer *</type>
        <definition>ProductQuantizer* faiss::read_ProductQuantizer</definition>
        <argsstring>(IOReader *reader)</argsstring>
        <name>read_ProductQuantizer</name>
        <param>
          <type>IOReader *</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aeecb2752b0d13ace2d17ebc0189e9ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_ProductQuantizer</definition>
        <argsstring>(const ProductQuantizer *pq, const char *fname)</argsstring>
        <name>write_ProductQuantizer</name>
        <param>
          <type>const ProductQuantizer *</type>
          <declname>pq</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1adbd20721104c8523bbc53d82f839b03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_ProductQuantizer</definition>
        <argsstring>(const ProductQuantizer *pq, IOWriter *f)</argsstring>
        <name>write_ProductQuantizer</name>
        <param>
          <type>const ProductQuantizer *</type>
          <declname>pq</declname>
        </param>
        <param>
          <type>IOWriter *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aceed566acb3d5edfa90c70198ba5d962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::write_InvertedLists</definition>
        <argsstring>(const InvertedLists *ils, IOWriter *f)</argsstring>
        <name>write_InvertedLists</name>
        <param>
          <type>const <ref refid="structfaiss_1_1InvertedLists" kindref="compound">InvertedLists</ref> *</type>
          <declname>ils</declname>
        </param>
        <param>
          <type>IOWriter *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ada48910294697ded009a42677f92beeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfaiss_1_1InvertedLists" kindref="compound">InvertedLists</ref> *</type>
        <definition>InvertedLists* faiss::read_InvertedLists</definition>
        <argsstring>(IOReader *reader, int io_flags=0)</argsstring>
        <name>read_InvertedLists</name>
        <param>
          <type>IOReader *</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>int</type>
          <declname>io_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/index_io.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a08f648e8a7cb35af103a982fee81986e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::initialize_IVFPQ_precomputed_table</definition>
        <argsstring>(int &amp;use_precomputed_table, const Index *quantizer, const ProductQuantizer &amp;pq, AlignedTable&lt; float &gt; &amp;precomputed_table, bool verbose)</argsstring>
        <name>initialize_IVFPQ_precomputed_table</name>
        <param>
          <type>int &amp;</type>
          <declname>use_precomputed_table</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> *</type>
          <declname>quantizer</declname>
        </param>
        <param>
          <type>const ProductQuantizer &amp;</type>
          <declname>pq</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1AlignedTable" kindref="compound">AlignedTable</ref>&lt; float &gt; &amp;</type>
          <declname>precomputed_table</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pre-compute distance tables for IVFPQ with by-residual and METRIC_L2</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>use_precomputed_table</parametername>
</parameternamelist>
<parameterdescription>
<para>(I/O) =-1: force disable =0: decide heuristically (default: use tables only if they are &lt; precomputed_tables_max_bytes), set use_precomputed_table on output =1: tables that work for all quantizers (size 256 * nlist * M) =2: specific version for <ref refid="structfaiss_1_1MultiIndexQuantizer" kindref="compound">MultiIndexQuantizer</ref> (much more compact) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precomputed_table</parametername>
</parameternamelist>
<parameterdescription>
<para>precomputed table to intialize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexIVFPQ.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aaa38f721404f4610f50d04ab0a01ad28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::lo_build</definition>
        <argsstring>(uint64_t list_id, uint64_t offset)</argsstring>
        <name>lo_build</name>
        <param>
          <type>uint64_t</type>
          <declname>list_id</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/DirectMap.h" line="21" column="1" bodyfile="faiss/invlists/DirectMap.h" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afe521d71f2a4dd6a99b0a5d9fbe19787" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::lo_listno</definition>
        <argsstring>(uint64_t lo)</argsstring>
        <name>lo_listno</name>
        <param>
          <type>uint64_t</type>
          <declname>lo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/DirectMap.h" line="25" column="1" bodyfile="faiss/invlists/DirectMap.h" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a31e62b2521dd1eeb8632005add40ecbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::lo_offset</definition>
        <argsstring>(uint64_t lo)</argsstring>
        <name>lo_offset</name>
        <param>
          <type>uint64_t</type>
          <declname>lo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/invlists/DirectMap.h" line="29" column="1" bodyfile="faiss/invlists/DirectMap.h" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a80366c0d6f4ee6aea791c7bccf391f73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>A</declname>
            <defname>A</defname>
            <defval>32</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool faiss::is_aligned_pointer</definition>
        <argsstring>(const void *x)</argsstring>
        <name>is_aligned_pointer</name>
        <param>
          <type>const void *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/AlignedTable.h" line="22" column="1" bodyfile="faiss/utils/AlignedTable.h" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7466bd32de31640860393a701eaac5ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_L2sqr</definition>
        <argsstring>(const float *x, const float *y, size_t d)</argsstring>
        <name>fvec_L2sqr</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Squared L2 distance between two vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af6490f0d832462623e19a96481daeef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_inner_product</definition>
        <argsstring>(const float *x, const float *y, size_t d)</argsstring>
        <name>fvec_inner_product</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>inner product </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab43fbb711cebede63ce85090fcc2b4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_L1</definition>
        <argsstring>(const float *x, const float *y, size_t d)</argsstring>
        <name>fvec_L1</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>L1 distance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a31e28b5857d1df465e0b7c4785989d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_Linf</definition>
        <argsstring>(const float *x, const float *y, size_t d)</argsstring>
        <name>fvec_Linf</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac7a976807ce755fe82dde95efaecaf99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pairwise_L2sqr</definition>
        <argsstring>(int64_t d, int64_t nq, const float *xq, int64_t nb, const float *xb, float *dis, int64_t ldq=-1, int64_t ldb=-1, int64_t ldd=-1)</argsstring>
        <name>pairwise_L2sqr</name>
        <param>
          <type>int64_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nq</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xq</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xb</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldq</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldb</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldd</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute pairwise distances between sets of vectors</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nq</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of query vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of database vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xq</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors (size nq * d) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xb</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectros (size nb * d) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances (size nq * nb) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ldq</parametername>
<parametername>ldb</parametername>
<parametername>ldd</parametername>
</parameternamelist>
<parameterdescription>
<para>strides for the matrices </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1f0c0270de04cc395edd3d2823d0128d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_inner_products_ny</definition>
        <argsstring>(float *ip, const float *x, const float *y, size_t d, size_t ny)</argsstring>
        <name>fvec_inner_products_ny</name>
        <param>
          <type>float *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4ca22849311a991b72676be10315e2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_L2sqr_ny</definition>
        <argsstring>(float *dis, const float *x, const float *y, size_t d, size_t ny)</argsstring>
        <name>fvec_L2sqr_ny</name>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7a49180ebf10e643217bbce5862c7f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float faiss::fvec_norm_L2sqr</definition>
        <argsstring>(const float *x, size_t d)</argsstring>
        <name>fvec_norm_L2sqr</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>squared norm of a vector </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a40265aa2cbbe57e5b223c2c7dafac31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_norms_L2</definition>
        <argsstring>(float *ip, const float *x, size_t d, size_t nx)</argsstring>
        <name>fvec_norms_L2</name>
        <param>
          <type>float *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute the L2 norms for a set of vectors</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ip</parametername>
</parameternamelist>
<parameterdescription>
<para>output norms, size nx </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>set of vectors, size nx * d </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abce90e9d55d6838c7a37422285192d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_norms_L2sqr</definition>
        <argsstring>(float *ip, const float *x, size_t d, size_t nx)</argsstring>
        <name>fvec_norms_L2sqr</name>
        <param>
          <type>float *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <briefdescription>
<para>same as fvec_norms_L2, but computes square norms </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1d81952ec447e6886d2fd3b930fdc096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_renorm_L2</definition>
        <argsstring>(size_t d, size_t nx, float *x)</argsstring>
        <name>fvec_renorm_L2</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a948cc81e43160b04d3e4c2cd8041f9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::inner_product_to_L2sqr</definition>
        <argsstring>(float *dis, const float *nr1, const float *nr2, size_t n1, size_t n2)</argsstring>
        <name>inner_product_to_L2sqr</name>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>nr1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>nr2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a3ccc8ec4f2a74c6154befe048fe83f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_inner_products_by_idx</definition>
        <argsstring>(float *ip, const float *x, const float *y, const int64_t *ids, size_t d, size_t nx, size_t ny)</argsstring>
        <name>fvec_inner_products_by_idx</name>
        <param>
          <type>float *</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a470eea056c32c67ac13bb4791394b0b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_L2sqr_by_idx</definition>
        <argsstring>(float *dis, const float *x, const float *y, const int64_t *ids, size_t d, size_t nx, size_t ny)</argsstring>
        <name>fvec_L2sqr_by_idx</name>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afbe3e1fcb434cea1ee9ff8ed6ec1d609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pairwise_indexed_L2sqr</definition>
        <argsstring>(size_t d, size_t n, const float *x, const int64_t *ix, const float *y, const int64_t *iy, float *dis)</argsstring>
        <name>pairwise_indexed_L2sqr</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>iy</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute dis[j] = L2sqr(x[ix[j]], y[iy[j]]) forall j=0..n-1</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>size (max(ix) + 1, d) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>size (max(iy) + 1, d) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ix</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iy</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a687edf56ab386203fcd992572c539f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pairwise_indexed_inner_product</definition>
        <argsstring>(size_t d, size_t n, const float *x, const int64_t *ix, const float *y, const int64_t *iy, float *dis)</argsstring>
        <name>pairwise_indexed_inner_product</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ix</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>iy</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a880c7318971f866267a86945aaa61b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_inner_product</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, float_minheap_array_t *res)</argsstring>
        <name>knn_inner_product</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_minheap_array_t</ref> *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k nearest neighors of each of the nx vectors x among the ny vector y, w.r.t to max inner product</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors, size nx * d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors, size ny * d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>result array, which also provides k. Sorted on output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7931bf425c5825f2634c20952bbdb4b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_L2sqr</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, float_maxheap_array_t *res, const float *y_norm2=nullptr)</argsstring>
        <name>knn_L2sqr</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_maxheap_array_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y_norm2</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as knn_inner_product, for the L2 distance <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>y_norm2</parametername>
</parameternamelist>
<parameterdescription>
<para>norms for the y vectors (nullptr or size ny) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1adaadf5c986701e97103b476018c6d488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_inner_products_by_idx</definition>
        <argsstring>(const float *x, const float *y, const int64_t *ids, size_t d, size_t nx, size_t ny, float_minheap_array_t *res)</argsstring>
        <name>knn_inner_products_by_idx</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_minheap_array_t</ref> *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad3d348596de734e44b4dd89fdc19cc32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_L2sqr_by_idx</definition>
        <argsstring>(const float *x, const float *y, const int64_t *ids, size_t d, size_t nx, size_t ny, float_maxheap_array_t *res)</argsstring>
        <name>knn_L2sqr_by_idx</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_maxheap_array_t</ref> *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a139f6e538b65f47b826794620af7d491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::range_search_L2sqr</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, float radius, RangeSearchResult *result)</argsstring>
        <name>range_search_L2sqr</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>RangeSearchResult *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k nearest neighors of each of the nx vectors x among the ny vector y, w.r.t to max inner product</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>query vectors, size nx * d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>database vectors, size ny * d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>search radius around the x vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>result structure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab29d725b808df6f142b80f21aa45e507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::range_search_inner_product</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, float radius, RangeSearchResult *result)</argsstring>
        <name>range_search_inner_product</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>RangeSearchResult *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>same as range_search_L2sqr for the inner product similarity </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6bae4e24e73c75640d6db8760e513d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::compute_PQ_dis_tables_dsub2</definition>
        <argsstring>(size_t d, size_t ksub, const float *centroids, size_t nx, const float *x, bool is_inner_product, float *dis_tables)</argsstring>
        <name>compute_PQ_dis_tables_dsub2</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ksub</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>centroids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inner_product</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis_tables</declname>
        </param>
        <briefdescription>
<para>specialized function for PQ2 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/distances.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ada09f7cd8c85cfbc3caf5b943b10bcc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::pairwise_extra_distances</definition>
        <argsstring>(int64_t d, int64_t nq, const float *xq, int64_t nb, const float *xb, MetricType mt, float metric_arg, float *dis, int64_t ldq=-1, int64_t ldb=-1, int64_t ldd=-1)</argsstring>
        <name>pairwise_extra_distances</name>
        <param>
          <type>int64_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nq</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xq</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xb</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>mt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>metric_arg</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dis</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldq</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldb</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ldd</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/extra_distances.h" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a5accc87f00bcb41b304aa6695767f176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::knn_extra_metrics</definition>
        <argsstring>(const float *x, const float *y, size_t d, size_t nx, size_t ny, MetricType mt, float metric_arg, float_maxheap_array_t *res)</argsstring>
        <name>knn_extra_metrics</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ny</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>mt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>metric_arg</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">float_maxheap_array_t</ref> *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/extra_distances.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af8590366fb08be90126b12dbecea7d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DistanceComputer *</type>
        <definition>DistanceComputer* faiss::get_extra_distance_computer</definition>
        <argsstring>(size_t d, MetricType mt, float metric_arg, size_t nb, const float *xb)</argsstring>
        <name>get_extra_distance_computer</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
          <declname>mt</declname>
        </param>
        <param>
          <type>float</type>
          <declname>metric_arg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get a DistanceComputer that refers to this type of distance and indexes a flat array of size nb </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/extra_distances.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a3c20def47976af19292a160b2ec551d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(4)</argsstring>
        <name>SPECIALIZED_HC</name>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming-inl.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1acb4e4208ec84a403e02dba1b18b29840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(8)</argsstring>
        <name>SPECIALIZED_HC</name>
        <param>
          <type>8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming-inl.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a138c0f4e83d2e8b7fdd90ef895f8c6f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(16)</argsstring>
        <name>SPECIALIZED_HC</name>
        <param>
          <type>16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming-inl.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a965aa1292a3957feaaec0f4ed1b54f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(20)</argsstring>
        <name>SPECIALIZED_HC</name>
        <param>
          <type>20</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming-inl.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a69f0b96e4d8c59be97ee73aedafac0a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(32)</argsstring>
        <name>SPECIALIZED_HC</name>
        <param>
          <type>32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming-inl.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aadcee2efcbb11d2c1d284589ba12b8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::SPECIALIZED_HC</definition>
        <argsstring>(64)</argsstring>
        <name>SPECIALIZED_HC</name>
        <param>
          <type>64</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming-inl.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a69337e23232a204be3e1464713fee62d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::generalized_hamming_64</definition>
        <argsstring>(uint64_t a)</argsstring>
        <name>generalized_hamming_64</name>
        <param>
          <type>uint64_t</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming-inl.h" line="382" column="1" bodyfile="faiss/utils/hamming-inl.h" bodystart="382" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a31146ebd95375313ae7c02ba06209ca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::generalized_hammings_knn_hc</definition>
        <argsstring>(int_maxheap_array_t *ha, const uint8_t *a, const uint8_t *b, size_t nb, size_t code_size, int ordered=true)</argsstring>
        <name>generalized_hammings_knn_hc</name>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">int_maxheap_array_t</ref> *</type>
          <declname>ha</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>code_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordered</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>generalized Hamming distances (= count number of code bytes that are the same) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming-inl.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0e10b0864a93653945dbd950b9fcdacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bitvec_print</definition>
        <argsstring>(const uint8_t *b, size_t d)</argsstring>
        <name>bitvec_print</name>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a224890519ae5efe7a3c8cdf94bda60e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvecs2bitvecs</definition>
        <argsstring>(const float *x, uint8_t *b, size_t d, size_t n)</argsstring>
        <name>fvecs2bitvecs</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad8f68b3bcb7a897358ab8501ea86b897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bitvecs2fvecs</definition>
        <argsstring>(const uint8_t *b, float *x, size_t d, size_t n)</argsstring>
        <name>bitvecs2fvecs</name>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afde8c1f96d4c776b101dd67cc0064c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec2bitvec</definition>
        <argsstring>(const float *x, uint8_t *b, size_t d)</argsstring>
        <name>fvec2bitvec</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6ea3261fda6f9dc53c401b4cccb90268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bitvec_shuffle</definition>
        <argsstring>(size_t n, size_t da, size_t db, const int *order, const uint8_t *a, uint8_t *b)</argsstring>
        <name>bitvec_shuffle</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>da</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>db</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>order</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shuffle the bits from b(i, j) := a(i, order[j]) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7d2125afc95e3417b270cb9428f8e0ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::popcount64</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>popcount64</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="102" column="1" bodyfile="faiss/utils/hamming.h" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0832c5ab58f4d1a340b0bde273c5b501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hammings</definition>
        <argsstring>(const uint8_t *a, const uint8_t *b, size_t na, size_t nb, size_t nbytespercode, hamdis_t *dis)</argsstring>
        <name>hammings</name>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>na</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytespercode</declname>
        </param>
        <param>
          <type>hamdis_t *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute a set of Hamming distances between na and nb binary vectors</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>size na * nbytespercode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>size nb * nbytespercode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytespercode</parametername>
</parameternamelist>
<parameterdescription>
<para>should be multiple of 8 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dis</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances, size na * nb </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a111b1ab3b50bcd06d29c588122811477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hammings_knn_hc</definition>
        <argsstring>(int_maxheap_array_t *ha, const uint8_t *a, const uint8_t *b, size_t nb, size_t ncodes, int ordered)</argsstring>
        <name>hammings_knn_hc</name>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">int_maxheap_array_t</ref> *</type>
          <declname>ha</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k smallest Hamming distances for a set of binary query vectors, using a max heap. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>queries, size ha-&gt;nh * ncodes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>database, size nb * ncodes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>number of database vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncodes</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the binary codes (bytes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ordered</parametername>
</parameternamelist>
<parameterdescription>
<para>if != 0: order the results by decreasing distance (may be bottleneck for k/n &gt; 0.01) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0c5abbe20058359340d9c7cb635f344b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hammings_knn</definition>
        <argsstring>(int_maxheap_array_t *ha, const uint8_t *a, const uint8_t *b, size_t nb, size_t ncodes, int ordered)</argsstring>
        <name>hammings_knn</name>
        <param>
          <type><ref refid="structfaiss_1_1HeapArray" kindref="compound">int_maxheap_array_t</ref> *</type>
          <declname>ha</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7910c770df07bd8b6168ece7f5ff92ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hammings_knn_mc</definition>
        <argsstring>(const uint8_t *a, const uint8_t *b, size_t na, size_t nb, size_t k, size_t ncodes, int32_t *distances, int64_t *labels)</argsstring>
        <name>hammings_knn_mc</name>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>na</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the k smallest Hamming distances for a set of binary query vectors, using counting max. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>queries, size na * ncodes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>database, size nb * ncodes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>na</parametername>
</parameternamelist>
<parameterdescription>
<para>number of query vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb</parametername>
</parameternamelist>
<parameterdescription>
<para>number of database vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors/distances to return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncodes</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the binary codes (bytes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output distances from each query vector to its k nearest neighbors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output ids of the k nearest neighbors to each query vector </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1032890ca79ab7443c0af4fde09b121c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hamming_range_search</definition>
        <argsstring>(const uint8_t *a, const uint8_t *b, size_t na, size_t nb, int radius, size_t ncodes, RangeSearchResult *result)</argsstring>
        <name>hamming_range_search</name>
        <param>
          <type>const uint8_t *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>na</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>RangeSearchResult *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same as hammings_knn except we are doing a range search with radius </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac713458e556afa5bd612b88944292d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::hamming_count_thres</definition>
        <argsstring>(const uint8_t *bs1, const uint8_t *bs2, size_t n1, size_t n2, hamdis_t ht, size_t ncodes, size_t *nptr)</argsstring>
        <name>hamming_count_thres</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bs1</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bs2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n2</declname>
        </param>
        <param>
          <type>hamdis_t</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>nptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad32229f823f2a0a920f0b62a702a67c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::match_hamming_thres</definition>
        <argsstring>(const uint8_t *bs1, const uint8_t *bs2, size_t n1, size_t n2, hamdis_t ht, size_t ncodes, int64_t *idx, hamdis_t *dis)</argsstring>
        <name>match_hamming_thres</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bs1</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bs2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n2</declname>
        </param>
        <param>
          <type>hamdis_t</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>hamdis_t *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a399cfe2b1a7b2e3d722e10654c164ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::crosshamming_count_thres</definition>
        <argsstring>(const uint8_t *dbs, size_t n, hamdis_t ht, size_t ncodes, size_t *nptr)</argsstring>
        <name>crosshamming_count_thres</name>
        <param>
          <type>const uint8_t *</type>
          <declname>dbs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>hamdis_t</type>
          <declname>ht</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>ncodes</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>nptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af860acfd5b9adbb6a50d4b458d0df8b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hamdis_t</type>
        <definition>hamdis_t faiss::hamming</definition>
        <argsstring>(const uint64_t *bs1, const uint64_t *bs2, size_t nwords)</argsstring>
        <name>hamming</name>
        <param>
          <type>const uint64_t *</type>
          <declname>bs1</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>bs2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nwords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1d40aec5723474516de576263cc03048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_pop</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids)</argsstring>
        <name>heap_pop</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pops the top element from the heap defined by bh_val[0..k-1] and bh_ids[0..k-1]. on output the element at k-1 is undefined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="46" column="1" bodyfile="faiss/utils/Heap.h" bodystart="46" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1acbe85976d4f73309622f6b62c4d7af2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_push</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids, typename C::T val, typename C::TI ids)</argsstring>
        <name>heap_push</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>typename C::T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>typename C::TI</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pushes the element (val, ids) into the heap bh_val[0..k-2] and bh_ids[0..k-2]. on output the element at k-1 is defined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="78" column="1" bodyfile="faiss/utils/Heap.h" bodystart="78" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ae2b2237197d94a5414eef24eb7b93700" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_replace_top</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids, typename C::T val, typename C::TI ids)</argsstring>
        <name>heap_replace_top</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>typename C::T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>typename C::TI</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the top element from the heap defined by bh_val[0..k-1] and bh_ids[0..k-1]. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="103" column="1" bodyfile="faiss/utils/Heap.h" bodystart="103" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6007eab1211f86326246114757ee8c41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_pop</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids)</argsstring>
        <name>minheap_pop</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="138" column="1" bodyfile="faiss/utils/Heap.h" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a34d5f3d2e6e58005727989c3b2def7fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_push</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, T val, int64_t ids)</argsstring>
        <name>minheap_push</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="143" column="1" bodyfile="faiss/utils/Heap.h" bodystart="143" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a56261d03ad06ddadde7f9c8161c48f88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_replace_top</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, T val, int64_t ids)</argsstring>
        <name>minheap_replace_top</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="153" column="1" bodyfile="faiss/utils/Heap.h" bodystart="153" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af1853d9d3e0c4c0d3ebf204c1f50c30c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_pop</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids)</argsstring>
        <name>maxheap_pop</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="163" column="1" bodyfile="faiss/utils/Heap.h" bodystart="163" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8c87f0f0d3f96ede4b6cd031592aaed1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_push</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, T val, int64_t ids)</argsstring>
        <name>maxheap_push</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="168" column="1" bodyfile="faiss/utils/Heap.h" bodystart="168" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0060a794c9aa0f221dec2ed996f4cab6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_replace_top</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, T val, int64_t ids)</argsstring>
        <name>maxheap_replace_top</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="178" column="1" bodyfile="faiss/utils/Heap.h" bodystart="178" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8617ea308e081aed83d4a084a9d31f70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_heapify</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids, const typename C::T *x=nullptr, const typename C::TI *ids=nullptr, size_t k0=0)</argsstring>
        <name>heap_heapify</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const typename C::T *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const typename C::TI *</type>
          <declname>ids</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="195" column="1" bodyfile="faiss/utils/Heap.h" bodystart="195" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a74010fa2ad110134f8b7c5e3af54a98b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_heapify</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, const T *x=nullptr, const int64_t *ids=nullptr, size_t k0=0)</argsstring>
        <name>minheap_heapify</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="220" column="1" bodyfile="faiss/utils/Heap.h" bodystart="220" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad80324df320ebcc1e5deecbe4e8626d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_heapify</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, const T *x=nullptr, const int64_t *ids=nullptr, size_t k0=0)</argsstring>
        <name>maxheap_heapify</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>k0</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="231" column="1" bodyfile="faiss/utils/Heap.h" bodystart="231" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afa5c2b8f24eb244fb064af0c7d853422" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::heap_addn</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids, const typename C::T *x, const typename C::TI *ids, size_t n)</argsstring>
        <name>heap_addn</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const typename C::T *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const typename C::TI *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="247" column="1" bodyfile="faiss/utils/Heap.h" bodystart="247" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad1864b81445cbbc1ffe06fa8d0d26943" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::minheap_addn</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, const T *x, const int64_t *ids, size_t n)</argsstring>
        <name>minheap_addn</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="272" column="1" bodyfile="faiss/utils/Heap.h" bodystart="272" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a31eaeca29f48abb9ca4822085ab24a47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::maxheap_addn</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids, const T *x, const int64_t *ids, size_t n)</argsstring>
        <name>maxheap_addn</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="283" column="1" bodyfile="faiss/utils/Heap.h" bodystart="283" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4e69334ccd78982042a6210c743d0418" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t faiss::heap_reorder</definition>
        <argsstring>(size_t k, typename C::T *bh_val, typename C::TI *bh_ids)</argsstring>
        <name>heap_reorder</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="300" column="1" bodyfile="faiss/utils/Heap.h" bodystart="300" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa29a53dfe2924fb9684292be43539228" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t faiss::minheap_reorder</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids)</argsstring>
        <name>minheap_reorder</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="332" column="1" bodyfile="faiss/utils/Heap.h" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1adf25de8d60180e4d314a6d1be95d4334" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t faiss::maxheap_reorder</definition>
        <argsstring>(size_t k, T *bh_val, int64_t *bh_ids)</argsstring>
        <name>maxheap_reorder</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="337" column="1" bodyfile="faiss/utils/Heap.h" bodystart="337" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8023405f5360828c9a892510a5f4c4ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::indirect_heap_pop</definition>
        <argsstring>(size_t k, const typename C::T *bh_val, typename C::TI *bh_ids)</argsstring>
        <name>indirect_heap_pop</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="432" column="1" bodyfile="faiss/utils/Heap.h" bodystart="432" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8ecaf37c77256e02a946e1572b992ed5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void faiss::indirect_heap_push</definition>
        <argsstring>(size_t k, const typename C::T *bh_val, typename C::TI *bh_ids, typename C::TI id)</argsstring>
        <name>indirect_heap_push</name>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const typename C::T *</type>
          <declname>bh_val</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>bh_ids</declname>
        </param>
        <param>
          <type>typename C::TI</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/Heap.h" line="461" column="1" bodyfile="faiss/utils/Heap.h" bodystart="461" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a36bf2bb72e8dd3c2e320a6ef89765635" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T faiss::cmin_nextafter</definition>
        <argsstring>(T x)</argsstring>
        <name>cmin_nextafter</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6081a16de4c32586093673ee7590731f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T faiss::cmax_nextafter</definition>
        <argsstring>(T x)</argsstring>
        <name>cmax_nextafter</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a49b45a342afbbed4b3d58dd42ff19f71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float faiss::cmin_nextafter&lt; float &gt;</definition>
        <argsstring>(float x)</argsstring>
        <name>cmin_nextafter&lt; float &gt;</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="77" column="1" bodyfile="faiss/utils/ordered_key_value.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0f12494aca68dc1eafaee9caefb3a4b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>float</type>
        <definition>float faiss::cmax_nextafter&lt; float &gt;</definition>
        <argsstring>(float x)</argsstring>
        <name>cmax_nextafter&lt; float &gt;</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="82" column="1" bodyfile="faiss/utils/ordered_key_value.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1abec32c4c15ce3c61dc2dfd6ca6a8382f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t faiss::cmin_nextafter&lt; uint16_t &gt;</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>cmin_nextafter&lt; uint16_t &gt;</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="87" column="1" bodyfile="faiss/utils/ordered_key_value.h" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a8bfdae186db8cb49267f2164f89f5f48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t faiss::cmax_nextafter&lt; uint16_t &gt;</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>cmax_nextafter&lt; uint16_t &gt;</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/ordered_key_value.h" line="92" column="1" bodyfile="faiss/utils/ordered_key_value.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9c403fd30f8012bde1e38ea9c2dcdab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>C::T</type>
        <definition>C::T faiss::partition_fuzzy</definition>
        <argsstring>(typename C::T *vals, typename C::TI *ids, size_t n, size_t q_min, size_t q_max, size_t *q_out)</argsstring>
        <name>partition_fuzzy</name>
        <param>
          <type>typename C::T *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>q_min</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>q_max</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>q_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>partitions the table into 0:q and q:n where all elements above q are &gt;= all elements below q (for C = <ref refid="structfaiss_1_1CMax" kindref="compound">CMax</ref>, for <ref refid="structfaiss_1_1CMin" kindref="compound">CMin</ref> comparisons are reversed)</para><para>Returns the partition threshold. The elements q:n are destroyed on output. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afad6c999c4af7456ef9954f2f3021592" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>C::T</type>
        <definition>C::T faiss::partition</definition>
        <argsstring>(typename C::T *vals, typename C::TI *ids, size_t n, size_t q)</argsstring>
        <name>partition</name>
        <param>
          <type>typename C::T *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>typename C::TI *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>simplified interface for when the parition is not fuzzy </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="33" column="1" bodyfile="faiss/utils/partitioning.h" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a607e40148f9d63cc082cb0ed7cbdc1c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::simd_histogram_8</definition>
        <argsstring>(const uint16_t *data, int n, uint16_t min, int shift, int *hist)</argsstring>
        <name>simd_histogram_8</name>
        <param>
          <type>const uint16_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>low level SIMD histogramming functions 8-bin histogram of (x - min) &gt;&gt; shift values outside the range are ignored. the data table should be aligned on 32 bytes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aff3bc91a0aef8d8aca171a67611b65a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::simd_histogram_16</definition>
        <argsstring>(const uint16_t *data, int n, uint16_t min, int shift, int *hist)</argsstring>
        <name>simd_histogram_16</name>
        <param>
          <type>const uint16_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same for 16-bin histogram </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/partitioning.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a5044a6332355bfa866dda113f81e9602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::float_rand</definition>
        <argsstring>(float *x, size_t n, int64_t seed)</argsstring>
        <name>float_rand</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa149aec8f65085773f664bb7b5884743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::float_randn</definition>
        <argsstring>(float *x, size_t n, int64_t seed)</argsstring>
        <name>float_randn</name>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aba416d6990d202bfc7eac244a7d874c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::int64_rand</definition>
        <argsstring>(int64_t *x, size_t n, int64_t seed)</argsstring>
        <name>int64_rand</name>
        <param>
          <type>int64_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4d573c579e00f4c78a8fa9a50a6a7100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::byte_rand</definition>
        <argsstring>(uint8_t *x, size_t n, int64_t seed)</argsstring>
        <name>byte_rand</name>
        <param>
          <type>uint8_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac394a01fe370ddc30c394cdea9527fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::int64_rand_max</definition>
        <argsstring>(int64_t *x, size_t n, uint64_t max, int64_t seed)</argsstring>
        <name>int64_rand_max</name>
        <param>
          <type>int64_t *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad40228bb4ba7a96e0fe801b9f9b7c900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::rand_perm</definition>
        <argsstring>(int *perm, size_t n, int64_t seed)</argsstring>
        <name>rand_perm</name>
        <param>
          <type>int *</type>
          <declname>perm</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/random.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ae44e64d0db11cd08cfae98b8055628c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::min</definition>
        <argsstring>(simd16uint16 a, simd16uint16 b)</argsstring>
        <name>min</name>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="202" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="202" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1970d7e0fa67324947657d43a5bae9ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::max</definition>
        <argsstring>(simd16uint16 a, simd16uint16 b)</argsstring>
        <name>max</name>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="206" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a44550e642ff438af2de805eeaf7cda23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
        <definition>simd16uint16 faiss::combine2x2</definition>
        <argsstring>(simd16uint16 a, simd16uint16 b)</argsstring>
        <name>combine2x2</name>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="213" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="213" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a12cfacbde86018137e809d6f5a058d7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::cmp_ge32</definition>
        <argsstring>(simd16uint16 d0, simd16uint16 d1, simd16uint16 thr)</argsstring>
        <name>cmp_ge32</name>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>d0</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>d1</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>thr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="222" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="222" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab3ce07e3be6ce83bbc1a0bf229c707c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::cmp_le32</definition>
        <argsstring>(simd16uint16 d0, simd16uint16 d1, simd16uint16 thr)</argsstring>
        <name>cmp_le32</name>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>d0</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>d1</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>thr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="238" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="238" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afdc84fda618656633753330c92ad070e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
        <definition>simd32uint8 faiss::uint16_to_uint8_saturate</definition>
        <argsstring>(simd16uint16 a, simd16uint16 b)</argsstring>
        <name>uint16_to_uint8_saturate</name>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd16uint16" kindref="compound">simd16uint16</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="332" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a1a1ef7dc74c5b448482e503fb435400f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t faiss::get_MSBs</definition>
        <argsstring>(simd32uint8 a)</argsstring>
        <name>get_MSBs</name>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>get most significant bit of each byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="337" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="337" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a376a50b76efda66b8e55b8deb5ad8dc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
        <definition>simd32uint8 faiss::blendv</definition>
        <argsstring>(simd32uint8 a, simd32uint8 b, simd32uint8 mask)</argsstring>
        <name>blendv</name>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd32uint8" kindref="compound">simd32uint8</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>use MSB of each byte of mask to select a byte between a and b </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="342" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="342" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a40aa73417b26cd8c6872493a3c21b14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::hadd</definition>
        <argsstring>(simd8float32 a, simd8float32 b)</argsstring>
        <name>hadd</name>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="421" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="421" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1adfeefc42906233e7666584a566533021" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::unpacklo</definition>
        <argsstring>(simd8float32 a, simd8float32 b)</argsstring>
        <name>unpacklo</name>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="425" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="425" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a6d471fb67aa075837cc9411f22fac9c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::unpackhi</definition>
        <argsstring>(simd8float32 a, simd8float32 b)</argsstring>
        <name>unpackhi</name>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="429" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="429" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aafdd3366a94e78d8ef74c58c55ea4bbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
        <definition>simd8float32 faiss::fmadd</definition>
        <argsstring>(simd8float32 a, simd8float32 b, simd8float32 c)</argsstring>
        <name>fmadd</name>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1simd8float32" kindref="compound">simd8float32</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/simdlib_avx2.h" line="434" column="1" bodyfile="faiss/utils/simdlib_avx2.h" bodystart="434" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af2a71f7d5402ae02ce169a4cc83020eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double faiss::getmillisecs</definition>
        <argsstring>()</argsstring>
        <name>getmillisecs</name>
        <briefdescription>
<para>ms elapsed since some arbitrary epoch </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aa3af5769b0b649f112332a874c64d361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::get_mem_usage_kb</definition>
        <argsstring>()</argsstring>
        <name>get_mem_usage_kb</name>
        <briefdescription>
<para>get current RSS usage in kB </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a090355c2725c425a511a367cbfe41262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::get_cycles</definition>
        <argsstring>()</argsstring>
        <name>get_cycles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a40328c31abd0bbba5bd95d7de951e847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_madd</definition>
        <argsstring>(size_t n, const float *a, float bf, const float *b, float *c)</argsstring>
        <name>fvec_madd</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>bf</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute c := a + bf * b for a, b and c tables</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the tables </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>size n </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>restult table, size n </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a9da63b8bb84460f5e8ccf8e17622cc7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::fvec_madd_and_argmin</definition>
        <argsstring>(size_t n, const float *a, float bf, const float *b, float *c)</argsstring>
        <name>fvec_madd_and_argmin</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>bf</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>same as fvec_madd, also return index of the min of the result table <simplesect kind="return"><para>index of the min of table c </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab7c6da3d6915a010d5d3074d93878ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::reflection</definition>
        <argsstring>(const float *u, float *x, size_t n, size_t d, size_t nu)</argsstring>
        <name>reflection</name>
        <param>
          <type>const float *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1afb68fe89ad5e948974da1b70d7b4157c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::matrix_qr</definition>
        <argsstring>(int m, int n, float *a)</argsstring>
        <name>matrix_qr</name>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>compute the Q of the QR decomposition for m &gt; n <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>size n * m: input matrix and output Q </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad5827240bc67d6f8a612ba8761b34714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::ranklist_handle_ties</definition>
        <argsstring>(int k, int64_t *idx, const float *dis)</argsstring>
        <name>ranklist_handle_ties</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>dis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>distances are supposed to be sorted. Sorts indices with same distance </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a104f2c4626def41c53ad1ca0027741cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::ranklist_intersection_size</definition>
        <argsstring>(size_t k1, const int64_t *v1, size_t k2, const int64_t *v2)</argsstring>
        <name>ranklist_intersection_size</name>
        <param>
          <type>size_t</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k2</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>count the number of comon elements between v1 and v2 algorithm = sorting + bissection to avoid double-counting duplicates </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7690bafb56c991da908ee11822c7a8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::merge_result_table_with</definition>
        <argsstring>(size_t n, size_t k, int64_t *I0, float *D0, const int64_t *I1, const float *D1, bool keep_min=true, int64_t translation=0)</argsstring>
        <name>merge_result_table_with</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>I0</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>D0</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>I1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>D1</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_min</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>translation</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>merge a result table into another one</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I0</parametername>
<parametername>D0</parametername>
</parameternamelist>
<parameterdescription>
<para>first result table, size (n, k) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I1</parametername>
<parametername>D1</parametername>
</parameternamelist>
<parameterdescription>
<para>second result table, size (n, k) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep_min</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, keep min values, otherwise keep max </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>translation</parametername>
</parameternamelist>
<parameterdescription>
<para>add this value to all I1&apos;s indexes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>nb of values that were taken from the second table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1aeffbb44eed1c07967d77b369d7ba7b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double faiss::imbalance_factor</definition>
        <argsstring>(int n, int k, const int64_t *assign)</argsstring>
        <name>imbalance_factor</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>assign</declname>
        </param>
        <briefdescription>
<para>a balanced assignment has a IF of 1 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a94c1d99ac39d22e362aa27ce7c7ff714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double faiss::imbalance_factor</definition>
        <argsstring>(int k, const int *hist)</argsstring>
        <name>imbalance_factor</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
<para>same, takes a histogram as input </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a027b726c606d329c30840e51b539ddb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_argsort</definition>
        <argsstring>(size_t n, const float *vals, size_t *perm)</argsstring>
        <name>fvec_argsort</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0e967dd8492dc074a7d6950d437e53a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::fvec_argsort_parallel</definition>
        <argsstring>(size_t n, const float *vals, size_t *perm)</argsstring>
        <name>fvec_argsort_parallel</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>vals</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a7bea462108bee98d8d5859b51ec4db8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int faiss::ivec_hist</definition>
        <argsstring>(size_t n, const int *v, int vmax, int *hist)</argsstring>
        <name>ivec_hist</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vmax</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
<para>compute histogram on v </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a154a47857ed321b9db91122770a16e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::bincode_hist</definition>
        <argsstring>(size_t n, size_t nbits, const uint8_t *codes, int *hist)</argsstring>
        <name>bincode_hist</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbits</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>codes</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>hist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute histogram of bits on a code array</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>size(n, nbits / 8) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hist</parametername>
</parameternamelist>
<parameterdescription>
<para>size(nbits): nb of 1s in the array of codes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a4369329c9dbdfe23e3f35d09ba7b5c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t faiss::ivec_checksum</definition>
        <argsstring>(size_t n, const int *a)</argsstring>
        <name>ivec_checksum</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>compute a checksum on a table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1af851590d865ea2eae8dae3ae72406bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const float *</type>
        <definition>const float* faiss::fvecs_maybe_subsample</definition>
        <argsstring>(size_t d, size_t *n, size_t nmax, const float *x, bool verbose=false, int64_t seed=1234)</argsstring>
        <name>fvecs_maybe_subsample</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nmax</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>seed</declname>
          <defval>1234</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>random subsamples a set of vectors if there are too many of them</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>on input: nb of input vectors, output: nb of output vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmax</parametername>
</parameternamelist>
<parameterdescription>
<para>max nb of vectors to keep </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input array, size *n-by-d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>random seed to use for sampling </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>x or an array allocated with new [] with *n vectors </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ac8260e10cfeed08a4344b85845773e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::binary_to_real</definition>
        <argsstring>(size_t d, const uint8_t *x_in, float *x_out)</argsstring>
        <name>binary_to_real</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>x_in</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert binary vector to +1/-1 valued float vector.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vector (multiple of 8) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_in</parametername>
</parameternamelist>
<parameterdescription>
<para>input binary vector (uint8_t table of size d / 8) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output float vector (float table of size d) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ab491c9e2f77a750c9f0324bfe00e3e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void faiss::real_to_binary</definition>
        <argsstring>(size_t d, const float *x_in, uint8_t *x_out)</argsstring>
        <name>real_to_binary</name>
        <param>
          <type>size_t</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x_in</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>x_out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert float vector to binary vector. Components &gt; 0 are converted to 1, others to 0.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vector (multiple of 8) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_in</parametername>
</parameternamelist>
<parameterdescription>
<para>input float vector (float table of size d) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_out</parametername>
</parameternamelist>
<parameterdescription>
<para>output binary vector (uint8_t table of size d / 8) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1a0e26e4710a7c276f46b730d8ab6ac1e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t faiss::hash_bytes</definition>
        <argsstring>(const uint8_t *bytes, int64_t n)</argsstring>
        <name>hash_bytes</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A reasonable hashing function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefaiss_1ad86caef545c6a7672422d7d34c03f446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool faiss::check_openmp</definition>
        <argsstring>()</argsstring>
        <name>check_openmp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether OpenMP annotations were respected. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/utils.h" line="163" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Copyright (c) Facebook, Inc. and its affiliates.</para><para>This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.</para><para>Throughout the library, vectors are provided as float * pointers. Most algorithms can be optimized when several vectors are processed (added/searched) together in a batch. In this case, they are passed in as a matrix. When n vectors of size d are provided as float * x, component j of vector i is</para><para>x[ i * d + j ]</para><para>where 0 &lt;= i &lt; n and 0 &lt;= j &lt; d. In other words, matrices are always compact. When specifying the size of the matrix, we call it an n*d matrix, which implies a row-major storage.</para><para>Copyright (c) Facebook, Inc. and its affiliates.</para><para>This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree. I/O functions can read/write to a filename, a file handle or to an object that abstracts the medium.</para><para>The read functions return objects that should be deallocated with delete. All references within these objectes are owned by the object.</para><para>Copyright (c) Facebook, Inc. and its affiliates.</para><para>This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree. Definition of inverted lists + a few common classes that implement the interface.</para><para>Copyright (c) Facebook, Inc. and its affiliates.</para><para>This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree. Since IVF (inverted file) indexes are of so much use for large-scale use cases, we group a few functions related to them in this small library. Most functions work both on IndexIVFs and IndexIVFs embedded within an <ref refid="structfaiss_1_1IndexPreTransform" kindref="compound">IndexPreTransform</ref>.</para><para>Copyright (c) Facebook, Inc. and its affiliates.</para><para>This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree.In this file are the implementations of extra metrics beyond L2 and inner product</para><para>Copyright (c) Facebook, Inc. and its affiliates.</para><para>This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree. Defines a few objects that apply transformations to a set of vectors Often these are pre-processing steps. </para>    </detaileddescription>
    <location file="faiss/AutoTune.h" line="20" column="1"/>
  </compounddef>
</doxygen>
