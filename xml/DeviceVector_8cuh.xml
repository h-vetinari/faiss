<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="DeviceVector_8cuh" kind="file" language="C++">
    <compoundname>DeviceVector.cuh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Facebook,<sp/>Inc.<sp/>and<sp/>its<sp/>affiliates.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#pragma<sp/>once</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;faiss/impl/FaissAssert.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;faiss/gpu/utils/DeviceUtils.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;faiss/gpu/GpuResources.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;faiss/gpu/utils/StaticUtils.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;algorithm&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;cuda.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;vector&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>faiss<sp/>{<sp/>namespace<sp/>gpu<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>A<sp/>simple<sp/>version<sp/>of<sp/>thrust::device_vector&lt;T&gt;,<sp/>but<sp/>has<sp/>more<sp/>control</highlight></codeline>
<codeline><highlight class="normal">///<sp/>over<sp/>whether<sp/>resize()<sp/>initializes<sp/>new<sp/>space<sp/>with<sp/>T()<sp/>(which<sp/>we</highlight></codeline>
<codeline><highlight class="normal">///<sp/>don&apos;t<sp/>want),<sp/>and<sp/>control<sp/>on<sp/>how<sp/>much<sp/>the<sp/>reserved<sp/>space<sp/>grows<sp/>by</highlight></codeline>
<codeline><highlight class="normal">///<sp/>upon<sp/>resize/reserve.<sp/>It<sp/>is<sp/>also<sp/>meant<sp/>for<sp/>POD<sp/>types<sp/>only.</highlight></codeline>
<codeline><highlight class="normal">///</highlight></codeline>
<codeline><highlight class="normal">///<sp/>Any<sp/>new<sp/>memory<sp/>allocated<sp/>is<sp/>automatically<sp/>zeroed<sp/>before<sp/>being<sp/>presented<sp/>to</highlight></codeline>
<codeline><highlight class="normal">///<sp/>the<sp/>user.</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>DeviceVector<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DeviceVector(GpuResources*<sp/>res,<sp/>AllocInfo<sp/>allocInfo)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>num_(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity_(0),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_(res),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocInfo_(allocInfo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FAISS_ASSERT(res_);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>~DeviceVector()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Clear<sp/>all<sp/>allocated<sp/>memory;<sp/>reset<sp/>to<sp/>zero<sp/>size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>clear()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_.release();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>num_<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>capacity_<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>size()<sp/>const<sp/>{<sp/>return<sp/>num_;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>capacity()<sp/>const<sp/>{<sp/>return<sp/>capacity_;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T*<sp/>data()<sp/>{<sp/>return<sp/>(T*)<sp/>alloc_.data;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>T*<sp/>data()<sp/>const<sp/>{<sp/>return<sp/>(const<sp/>T*)<sp/>alloc_.data;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>OutT&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;OutT&gt;<sp/>copyToHost(cudaStream_t<sp/>stream)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FAISS_ASSERT(num_<sp/>*<sp/>sizeof(T)<sp/>%<sp/>sizeof(OutT)<sp/>==<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;OutT&gt;<sp/>out((num_<sp/>*<sp/>sizeof(T))<sp/>/<sp/>sizeof(OutT));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(num_<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAISS_ASSERT(data());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaMemcpyAsync(out.data(),<sp/>data(),<sp/>num_<sp/>*<sp/>sizeof(T),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaMemcpyDeviceToHost,<sp/>stream));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>out;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Returns<sp/>true<sp/>if<sp/>we<sp/>actually<sp/>reallocated<sp/>memory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>If<sp/>`reserveExact`<sp/>is<sp/>true,<sp/>then<sp/>we<sp/>reserve<sp/>only<sp/>the<sp/>memory<sp/>that</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>we<sp/>need<sp/>for<sp/>what<sp/>we&apos;re<sp/>appending</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>append(const<sp/>T*<sp/>d,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>reserveExact<sp/>=<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>mem<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>reserveSize<sp/>=<sp/>num_<sp/>+<sp/>n;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!reserveExact)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reserveSize<sp/>=<sp/>getNewCapacity_(reserveSize);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>reserve(reserveSize,<sp/>stream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>dev<sp/>=<sp/>getDeviceForAddress(d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dev<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaMemcpyAsync(data()<sp/>+<sp/>num_,<sp/>d,<sp/>n<sp/>*<sp/>sizeof(T),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaMemcpyHostToDevice,<sp/>stream));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaMemcpyAsync(data()<sp/>+<sp/>num_,<sp/>d,<sp/>n<sp/>*<sp/>sizeof(T),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaMemcpyDeviceToDevice,<sp/>stream));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_<sp/>+=<sp/>n;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>mem;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Returns<sp/>true<sp/>if<sp/>we<sp/>actually<sp/>reallocated<sp/>memory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>resize(size_t<sp/>newSize,<sp/>cudaStream_t<sp/>stream)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>mem<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(num_<sp/>&lt;<sp/>newSize)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>reserve(getNewCapacity_(newSize),<sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Don&apos;t<sp/>bother<sp/>zero<sp/>initializing<sp/>the<sp/>newly<sp/>accessible<sp/>memory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>(unlike<sp/>thrust::device_vector)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>num_<sp/>=<sp/>newSize;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>mem;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Clean<sp/>up<sp/>after<sp/>oversized<sp/>allocations,<sp/>while<sp/>leaving<sp/>some<sp/>space<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>remain<sp/>for<sp/>subsequent<sp/>allocations<sp/>(if<sp/>`exact`<sp/>false)<sp/>or<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>exactly<sp/>the<sp/>space<sp/>we<sp/>need<sp/>(if<sp/>`exact`<sp/>true);<sp/>returns<sp/>space</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>reclaimed<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>reclaim(bool<sp/>exact,<sp/>cudaStream_t<sp/>stream)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>free<sp/>=<sp/>capacity_<sp/>-<sp/>num_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(exact)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>realloc_(num_,<sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>free<sp/>*<sp/>sizeof(T);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>more<sp/>than<sp/>1/4th<sp/>of<sp/>the<sp/>space<sp/>is<sp/>free,<sp/>then<sp/>we<sp/>want<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>truncate<sp/>to<sp/>only<sp/>having<sp/>1/8th<sp/>of<sp/>the<sp/>space<sp/>free;<sp/>this<sp/>still</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>preserves<sp/>some<sp/>space<sp/>for<sp/>new<sp/>elements,<sp/>but<sp/>won&apos;t<sp/>force<sp/>us<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>double<sp/>our<sp/>size<sp/>right<sp/>away</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(free<sp/>&gt;<sp/>(capacity_<sp/>/<sp/>4))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>newFree<sp/>=<sp/>capacity_<sp/>/<sp/>8;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>newCapacity<sp/>=<sp/>num_<sp/>+<sp/>newFree;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>oldCapacity<sp/>=<sp/>capacity_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FAISS_ASSERT(newCapacity<sp/>&lt;<sp/>oldCapacity);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>realloc_(newCapacity,<sp/>stream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(oldCapacity<sp/>-<sp/>newCapacity)<sp/>*<sp/>sizeof(T);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Returns<sp/>true<sp/>if<sp/>we<sp/>actually<sp/>reallocated<sp/>memory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>reserve(size_t<sp/>newCapacity,<sp/>cudaStream_t<sp/>stream)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(newCapacity<sp/>&lt;=<sp/>capacity_)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Otherwise,<sp/>we<sp/>need<sp/>new<sp/>space.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>realloc_(newCapacity,<sp/>stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>realloc_(size_t<sp/>newCapacity,<sp/>cudaStream_t<sp/>stream)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>FAISS_ASSERT(num_<sp/>&lt;=<sp/>newCapacity);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>newSizeInBytes<sp/>=<sp/>newCapacity<sp/>*<sp/>sizeof(T);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>oldSizeInBytes<sp/>=<sp/>num_<sp/>*<sp/>sizeof(T);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>The<sp/>new<sp/>allocation<sp/>will<sp/>occur<sp/>on<sp/>this<sp/>stream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>allocInfo_.stream<sp/>=<sp/>stream;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>newAlloc<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res_-&gt;allocMemoryHandle(AllocRequest(allocInfo_,<sp/>newSizeInBytes));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Copy<sp/>over<sp/>any<sp/>old<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaMemcpyAsync(newAlloc.data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldSizeInBytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaMemcpyDeviceToDevice,<sp/>stream));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Zero<sp/>out<sp/>the<sp/>new<sp/>space<sp/>past<sp/>the<sp/>data<sp/>we<sp/>just<sp/>copied</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CUDA_VERIFY(cudaMemsetAsync((uint8_t*)<sp/>newAlloc.data<sp/>+<sp/>oldSizeInBytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newSizeInBytes<sp/>-<sp/>oldSizeInBytes,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_<sp/>=<sp/>std::move(newAlloc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>capacity_<sp/>=<sp/>newCapacity;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>getNewCapacity_(size_t<sp/>preferredSize)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>utils::nextHighestPowerOf2(preferredSize);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>///<sp/>Our<sp/>current<sp/>memory<sp/>allocation,<sp/>if<sp/>any</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GpuMemoryReservation<sp/>alloc_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>///<sp/>current<sp/>valid<sp/>number<sp/>of<sp/>T<sp/>present</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>num_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>///<sp/>current<sp/>space<sp/>of<sp/>T<sp/>present<sp/>(bytes<sp/>is<sp/>sizeof(T)<sp/>*<sp/>capacity_)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>capacity_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>///<sp/>Where<sp/>we<sp/>should<sp/>allocate<sp/>memory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>GpuResources*<sp/>res_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>///<sp/>How<sp/>we<sp/>should<sp/>allocate<sp/>memory</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AllocInfo<sp/>allocInfo_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/>}<sp/>//<sp/>namespace</highlight></codeline>
    </programlisting>
    <location file="faiss/gpu/utils/DeviceVector.cuh"/>
  </compounddef>
</doxygen>
