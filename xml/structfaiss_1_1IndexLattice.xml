<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structfaiss_1_1IndexLattice" kind="struct" language="C++" prot="public">
    <compoundname>faiss::IndexLattice</compoundname>
    <basecompoundref refid="structfaiss_1_1Index" prot="public" virt="non-virtual">faiss::Index</basecompoundref>
    <includes refid="IndexLattice_8h" local="no">IndexLattice.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structfaiss_1_1IndexLattice_1a4089c006ee17ee7d5eac5095cca304e9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::IndexLattice::nsq</definition>
        <argsstring></argsstring>
        <name>nsq</name>
        <briefdescription>
<para>number of sub-vectors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="24" column="1" bodyfile="faiss/IndexLattice.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexLattice_1ac02440b4d1e666d9105d376852076f73" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::IndexLattice::dsq</definition>
        <argsstring></argsstring>
        <name>dsq</name>
        <briefdescription>
<para>dimension of sub-vectors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="26" column="1" bodyfile="faiss/IndexLattice.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexLattice_1adbe914419dc51e46b598d2c654a16f6a" prot="public" static="no" mutable="no">
        <type>ZnSphereCodecAlt</type>
        <definition>ZnSphereCodecAlt faiss::IndexLattice::zn_sphere_codec</definition>
        <argsstring></argsstring>
        <name>zn_sphere_codec</name>
        <briefdescription>
<para>the lattice quantizer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="29" column="1" bodyfile="faiss/IndexLattice.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexLattice_1aacf53ac36d93567b1e68505ea122e9bc" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::IndexLattice::scale_nbit</definition>
        <argsstring></argsstring>
        <name>scale_nbit</name>
        <briefdescription>
<para>nb bits used to encode the scale, per subvector </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="32" column="1" bodyfile="faiss/IndexLattice.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexLattice_1a596863f4c2c06a476669f450da1359d5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::IndexLattice::lattice_nbit</definition>
        <argsstring></argsstring>
        <name>lattice_nbit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="32" column="1" bodyfile="faiss/IndexLattice.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexLattice_1aabf1d37c71bc881b52b544820514c0de" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t faiss::IndexLattice::code_size</definition>
        <argsstring></argsstring>
        <name>code_size</name>
        <briefdescription>
<para>total, in bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="34" column="1" bodyfile="faiss/IndexLattice.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1IndexLattice_1aa3c7f1796a5c42bdb9891b2148e3e53f" prot="public" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; faiss::IndexLattice::trained</definition>
        <argsstring></argsstring>
        <name>trained</name>
        <briefdescription>
<para>mins and maxes of the vector norms, per subquantizer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="37" column="1" bodyfile="faiss/IndexLattice.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a2a002388d2c081c2dbab8508dcefe73d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int faiss::Index::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <briefdescription>
<para>vector dimension </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="56" column="1" bodyfile="faiss/Index.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a6970683faa021b7a6f1a0865c0d4eccd" prot="public" static="no" mutable="no">
        <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
        <definition>idx_t faiss::Index::ntotal</definition>
        <argsstring></argsstring>
        <name>ntotal</name>
        <briefdescription>
<para>total nb of indexed vectors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="57" column="1" bodyfile="faiss/Index.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a5590d847c5c2b958affd2a05e58a6f23" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::Index::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
<para>verbosity level </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="58" column="1" bodyfile="faiss/Index.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a6e92732617c4dbe364e7678dd8773a7f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool faiss::Index::is_trained</definition>
        <argsstring></argsstring>
        <name>is_trained</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set if the <ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> does not require training, or if training is done already </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="62" column="1" bodyfile="faiss/Index.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a8e18f641854b2bde83ecff0a2f9a6f4e" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref></type>
        <definition>MetricType faiss::Index::metric_type</definition>
        <argsstring></argsstring>
        <name>metric_type</name>
        <briefdescription>
<para>type of metric this index uses for search </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="65" column="1" bodyfile="faiss/Index.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structfaiss_1_1Index_1a6f60646d6877658ea4df05e0231ed232" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float faiss::Index::metric_arg</definition>
        <argsstring></argsstring>
        <name>metric_arg</name>
        <briefdescription>
<para>argument of the metric type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="66" column="1" bodyfile="faiss/Index.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structfaiss_1_1IndexLattice_1a4deba2703180b15a76050ff231efdf56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>faiss::IndexLattice::IndexLattice</definition>
        <argsstring>(idx_t d, int nsq, int scale_nbit, int r2)</argsstring>
        <name>IndexLattice</name>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scale_nbit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexLattice_1a19a6d0136b34d904d147f16922a64b93" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexLattice::train</definition>
        <argsstring>(idx_t n, const float *x) override</argsstring>
        <name>train</name>
        <reimplements refid="structfaiss_1_1Index_1a8f67dfd73993e192dc78f2c93d9d9532">train</reimplements>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform training on a representative set of vectors</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nb of training vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>training vecors, size n * d </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexLattice_1ac7c27786912bed039ef8d05a82db0acb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t faiss::IndexLattice::sa_code_size</definition>
        <argsstring>() const override</argsstring>
        <name>sa_code_size</name>
        <reimplements refid="structfaiss_1_1Index_1a5a050b805d4836afdf8f09251ad8b415">sa_code_size</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>size of the produced codes in bytes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexLattice_1abbe02fd8270a854f7b25285d9a0a5752" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexLattice::sa_encode</definition>
        <argsstring>(idx_t n, const float *x, uint8_t *bytes) const override</argsstring>
        <name>sa_encode</name>
        <reimplements refid="structfaiss_1_1Index_1a16770c0addc888b92deee089d6f97e7c">sa_encode</reimplements>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>encode a set of vectors</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors, size n * d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>output encoded vectors, size n * <ref refid="structfaiss_1_1IndexLattice_1ac7c27786912bed039ef8d05a82db0acb" kindref="member">sa_code_size()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexLattice_1a3fd27c778f435412336110785ba7124d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexLattice::sa_decode</definition>
        <argsstring>(idx_t n, const uint8_t *bytes, float *x) const override</argsstring>
        <name>sa_decode</name>
        <reimplements refid="structfaiss_1_1Index_1af39e4b00d097ac05dc9e31c52bfb9ed7">sa_decode</reimplements>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>encode a set of vectors</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>input encoded vectors, size n * <ref refid="structfaiss_1_1IndexLattice_1ac7c27786912bed039ef8d05a82db0acb" kindref="member">sa_code_size()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>output vectors, size n * d </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexLattice_1a174ccb3a272fa38dd9adfb78757ece76" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexLattice::add</definition>
        <argsstring>(idx_t n, const float *x) override</argsstring>
        <name>add</name>
        <reimplements refid="structfaiss_1_1Index_1a1b5e9ac70adbce0897dd6c8276ad96f2">add</reimplements>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>not implemented </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexLattice_1a9631d430b912348e5e16277251dda5e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexLattice::search</definition>
        <argsstring>(idx_t n, const float *x, idx_t k, float *distances, idx_t *labels) const override</argsstring>
        <name>search</name>
        <reimplements refid="structfaiss_1_1Index_1aced51b1ebc33c47ab3ae15ea906559a7">search</reimplements>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>query n vectors of dimension d to the index.</para><para>return at most k vectors. If there are not enough results for a query, the result array is padded with -1s.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output labels of the NNs, size n*k </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distances</parametername>
</parameternamelist>
<parameterdescription>
<para>output pairwise distances, size n*k </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1IndexLattice_1a5282d7f60eecbd5f552f184944a36b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void faiss::IndexLattice::reset</definition>
        <argsstring>() override</argsstring>
        <name>reset</name>
        <reimplements refid="structfaiss_1_1Index_1a849361f5f0ab0aba8d419c86f2594191">reset</reimplements>
        <briefdescription>
<para>removes all elements from the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/IndexLattice.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a13b30ab195baded94b6db98d8e111ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::add_with_ids</definition>
        <argsstring>(idx_t n, const float *x, const idx_t *xids)</argsstring>
        <name>add_with_ids</name>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1aa37b7428e0ac315db5e52b1cb1e42605">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFPQR_1ae526b4722b470a33643d40ef30cf27f7">add_with_ids</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndex_1a47f6969fe60d82b8e3407557ba9eec88">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFFlatDedup_1a4e27cfca56590371e0984d8f16b2b68d">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFPQFastScan_1ad31c3b30cd8dce05a5e12a0414fb9862">add_with_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a14e75169bddcd0251134821416b060a1">add_with_ids</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>xids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as add, but stores xids instead of sequential ids.</para><para>The default implementation fails with an assertion, as it is not supported by all indexes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xids</parametername>
</parameternamelist>
<parameterdescription>
<para>if non-null, ids to store for the vectors (size n) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a23c23be6698f583402bde568eee00ad1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::range_search</definition>
        <argsstring>(idx_t n, const float *x, float radius, RangeSearchResult *result) const</argsstring>
        <name>range_search</name>
        <reimplementedby refid="structfaiss_1_1IndexFlat_1ac56b7ed90ab65fab9c586a1e56006d12">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a6713d5a98b6fa66a72f465d0af504fb8">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFFlatDedup_1acb4f1350039546f5001c5fc36ac0fb2d">range_search</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a5b7b4b3dc5ea40f7076a00c81cc83d66">range_search</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>RangeSearchResult *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>query n vectors of dimension d to the index.</para><para>return all vectors with distance &lt; radius. Note that many indexes do not implement the range_search (only the k-NN search is mandatory).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>search radius </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>result table </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a010ae05c4ba70d309f9821d9b03182aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::assign</definition>
        <argsstring>(idx_t n, const float *x, idx_t *labels, idx_t k=1) const</argsstring>
        <name>assign</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndex_1ac108456e9c7cde162d77f64cc9c0dcdb">assign</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>k</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the indexes of the k vectors closest to the query x.</para><para>This function is identical as search but only return labels of neighbors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors to search, size n * d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>labels</parametername>
</parameternamelist>
<parameterdescription>
<para>output labels of the NNs, size n*k </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1ab70f7d0acb4a2f22857da3b17559ae82" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>virtual size_t faiss::Index::remove_ids</definition>
        <argsstring>(const IDSelector &amp;sel)</argsstring>
        <name>remove_ids</name>
        <reimplementedby refid="structfaiss_1_1IndexIVFPQR_1aabe4bb3b249f15af977c954f36e81147">remove_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a5781db5439f1d0f06cb3bf4c71ac0563">remove_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPQ_1adf5573ec615caf66584e056a29452669">remove_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexFlat_1af8ce3571ee6a1fe5f89e17c671f352b8">remove_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVFFlatDedup_1a528e3ac6d5b1c10954dfbdb6779d69bf">remove_ids</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a7f4d5e3d38ed2db026780522ffb85b9d">remove_ids</reimplementedby>
        <param>
          <type>const IDSelector &amp;</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>removes IDs from the index. Not supported by all indexes. Returns the number of elements removed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1afaf9673009f9fe5a53ed6db522a5f69c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::reconstruct</definition>
        <argsstring>(idx_t key, float *recons) const</argsstring>
        <name>reconstruct</name>
        <reimplementedby refid="structfaiss_1_1IndexFlat_1ae4b33315752b62cff1626f9f967167b1">reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexRefine_1a01356d39a4eda730517a295c2c7bb869">reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexNNDescent_1a1c6827189741d6d596421fae6475f4da">reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1afc92036fae3041caf6331b67754b599c">reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPQ_1a20913df3bfd8caa5187112641e8d9bc7">reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexScalarQuantizer_1a8fb8680f64465d643d96119da58099f3">reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1Index2Layer_1af2e505c14e62234eb251fcb37ef012d2">reconstruct</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexFlat_1ad690b0d256903730605ce36d64720fbf">reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexHNSW_1a660e5c8de1ba9c71bf3fe1f3bf0c8812">reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1MultiIndexQuantizer_1aa5bd578560419955a4bf7035cf09a392">reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a3b3270dcfa248dc30117644382a54e39">reconstruct</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconstruct a stored vector (or an approximation if lossy coding)</para><para>this function may not be defined for some indexes <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the vector to reconstruct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstucted vector (size d) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1ae7c0b683e1fd5c8770ea2b3e1a82ce7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::reconstruct_n</definition>
        <argsstring>(idx_t i0, idx_t ni, float *recons) const</argsstring>
        <name>reconstruct_n</name>
        <reimplementedby refid="structfaiss_1_1IndexPQ_1a99b187b1231a700617f7b228ec348ade">reconstruct_n</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexScalarQuantizer_1a06e6935b75f0b209f65fffa1c9e1477c">reconstruct_n</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a02ebb27dd56aec9a93c50bd6b96184e7">reconstruct_n</reimplementedby>
        <reimplementedby refid="structfaiss_1_1Index2Layer_1a226daedaa05c0e0bb3a0afb78d5aa120">reconstruct_n</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexFlat_1aae123842b90fe5f6b9efbd030ce5a7d1">reconstruct_n</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a7cc286dfbd8bfd43ea4b22173e28231c">reconstruct_n</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>i0</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>ni</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reconstruct vectors i0 to i0 + ni - 1</para><para>this function may not be defined for some indexes <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstucted vector (size ni * d) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a009874adf12440eb46396522ffd736cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::search_and_reconstruct</definition>
        <argsstring>(idx_t n, const float *x, idx_t k, float *distances, idx_t *labels, float *recons) const</argsstring>
        <name>search_and_reconstruct</name>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a10ae691e59f4a9b5be750cac4f542eee">search_and_reconstruct</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexIVF_1a77aec24920024a09f7661790d9534c10">search_and_reconstruct</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>distances</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>recons</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Similar to search, but also reconstructs the stored vectors (or an approximation in the case of lossy coding) for the search results.</para><para>If there are not enough results for a query, the resulting arrays is padded with -1s.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>recons</parametername>
</parameternamelist>
<parameterdescription>
<para>reconstructed vectors size (n, k, d) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1a1f12e2118b37a511f51d63e1aa9c0c20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::compute_residual</definition>
        <argsstring>(const float *x, float *residual, idx_t key) const</argsstring>
        <name>compute_residual</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndex_1a1c68659822d9e330a7737c8a6aaacae2">compute_residual</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexFlat_1a5eed422bb7d06a28188e97909ae1facf">compute_residual</reimplementedby>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>residual</declname>
        </param>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes a residual vector after indexing encoding.</para><para>The residual vector is the difference between a vector and the reconstruction that can be decoded from its representation in the index. The residual can be used for multiple-stage indexing methods, like <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref>&apos;s methods.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>input vector, size d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>residual</parametername>
</parameternamelist>
<parameterdescription>
<para>output residual vector, size d </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded index, as returned by search and assign </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1aff98fbf8e7dadf9ff528a031c53a43fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void faiss::Index::compute_residual_n</definition>
        <argsstring>(idx_t n, const float *xs, float *residuals, const idx_t *keys) const</argsstring>
        <name>compute_residual_n</name>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndex_1aac69097d303830c3d48c4016c1e6a955">compute_residual_n</reimplementedby>
        <reimplementedby refid="classfaiss_1_1gpu_1_1GpuIndexFlat_1a23b4a5f8a321d2ccf8768608c5a06ae1">compute_residual_n</reimplementedby>
        <param>
          <type><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>xs</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>residuals</declname>
        </param>
        <param>
          <type>const <ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">idx_t</ref> *</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes a residual vector after indexing encoding (batch form). Equivalent to calling compute_residual for each vector.</para><para>The residual vector is the difference between a vector and the reconstruction that can be decoded from its representation in the index. The residual can be used for multiple-stage indexing methods, like <ref refid="structfaiss_1_1IndexIVF" kindref="compound">IndexIVF</ref>&apos;s methods.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of vectors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xs</parametername>
</parameternamelist>
<parameterdescription>
<para>input vectors, size (n x d) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>residuals</parametername>
</parameternamelist>
<parameterdescription>
<para>output residual vectors, size (n x d) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded index, as returned by search and assign </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structfaiss_1_1Index_1ab53ef983521567c3dc3fee4543546e6a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>DistanceComputer *</type>
        <definition>virtual DistanceComputer* faiss::Index::get_distance_computer</definition>
        <argsstring>() const</argsstring>
        <name>get_distance_computer</name>
        <reimplementedby refid="structfaiss_1_1IndexScalarQuantizer_1a453a94e1d549a9ebf11e4b211c577f17">get_distance_computer</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexFlat_1a62205e1e7468b184115ee0c87d172a78">get_distance_computer</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPQ_1acb6744a8e64db9b01bfd58f4cf9fee77">get_distance_computer</reimplementedby>
        <reimplementedby refid="structfaiss_1_1Index2Layer_1ab8c5ac9637fe663d04438d0336f7552f">get_distance_computer</reimplementedby>
        <reimplementedby refid="structfaiss_1_1IndexPreTransform_1a3ce8b52cbad596e5880aaac81e774b1e">get_distance_computer</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a DistanceComputer (defined in AuxIndexStructures) object for this kind of index.</para><para>DistanceComputer is implemented for indexes that support random access of their vectors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="222" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" prot="public" static="no">
        <type>int64_t</type>
        <definition>using faiss::Index::idx_t =  int64_t</definition>
        <argsstring></argsstring>
        <name>idx_t</name>
        <briefdescription>
<para>all indices are this type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="52" column="1" bodyfile="faiss/Index.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1Index_1af317cb1e2ad0bd145f716f2243b693eb" prot="public" static="no">
        <type>float</type>
        <definition>using faiss::Index::component_t =  float</definition>
        <argsstring></argsstring>
        <name>component_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="53" column="1" bodyfile="faiss/Index.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structfaiss_1_1Index_1a1c60d7a12bf3ad27054963df8cccd93f" prot="public" static="no">
        <type>float</type>
        <definition>using faiss::Index::distance_t =  float</definition>
        <argsstring></argsstring>
        <name>distance_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/Index.h" line="54" column="1" bodyfile="faiss/Index.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="structfaiss_1_1Index" kindref="compound">Index</ref> that encodes a vector with a series of Zn lattice quantizers </para>    </detaileddescription>
    <inheritancegraph>
      <node id="562">
        <label>faiss::IndexLattice</label>
        <link refid="structfaiss_1_1IndexLattice"/>
        <childnode refid="563" relation="public-inheritance">
        </childnode>
      </node>
      <node id="563">
        <label>faiss::Index</label>
        <link refid="structfaiss_1_1Index"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="564">
        <label>faiss::IndexLattice</label>
        <link refid="structfaiss_1_1IndexLattice"/>
        <childnode refid="565" relation="public-inheritance">
        </childnode>
      </node>
      <node id="565">
        <label>faiss::Index</label>
        <link refid="structfaiss_1_1Index"/>
      </node>
    </collaborationgraph>
    <location file="faiss/IndexLattice.h" line="22" column="1" bodyfile="faiss/IndexLattice.h" bodystart="22" bodyend="59"/>
    <listofallmembers>
      <member refid="structfaiss_1_1IndexLattice_1a174ccb3a272fa38dd9adfb78757ece76" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>add</name></member>
      <member refid="structfaiss_1_1Index_1a13b30ab195baded94b6db98d8e111ed7" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>add_with_ids</name></member>
      <member refid="structfaiss_1_1Index_1a010ae05c4ba70d309f9821d9b03182aa" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>assign</name></member>
      <member refid="structfaiss_1_1IndexLattice_1aabf1d37c71bc881b52b544820514c0de" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>code_size</name></member>
      <member refid="structfaiss_1_1Index_1af317cb1e2ad0bd145f716f2243b693eb" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>component_t</name></member>
      <member refid="structfaiss_1_1Index_1a1f12e2118b37a511f51d63e1aa9c0c20" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>compute_residual</name></member>
      <member refid="structfaiss_1_1Index_1aff98fbf8e7dadf9ff528a031c53a43fa" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>compute_residual_n</name></member>
      <member refid="structfaiss_1_1Index_1a2a002388d2c081c2dbab8508dcefe73d" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>d</name></member>
      <member refid="structfaiss_1_1Index_1a1c60d7a12bf3ad27054963df8cccd93f" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>distance_t</name></member>
      <member refid="structfaiss_1_1IndexLattice_1ac02440b4d1e666d9105d376852076f73" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>dsq</name></member>
      <member refid="structfaiss_1_1Index_1ab53ef983521567c3dc3fee4543546e6a" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>get_distance_computer</name></member>
      <member refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>idx_t</name></member>
      <member refid="structfaiss_1_1Index_1a7b8cc435b5619d5d8382010a424bf67e" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>Index</name></member>
      <member refid="structfaiss_1_1IndexLattice_1a4deba2703180b15a76050ff231efdf56" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>IndexLattice</name></member>
      <member refid="structfaiss_1_1Index_1a6e92732617c4dbe364e7678dd8773a7f" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>is_trained</name></member>
      <member refid="structfaiss_1_1IndexLattice_1a596863f4c2c06a476669f450da1359d5" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>lattice_nbit</name></member>
      <member refid="structfaiss_1_1Index_1a6f60646d6877658ea4df05e0231ed232" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>metric_arg</name></member>
      <member refid="structfaiss_1_1Index_1a8e18f641854b2bde83ecff0a2f9a6f4e" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>metric_type</name></member>
      <member refid="structfaiss_1_1IndexLattice_1a4089c006ee17ee7d5eac5095cca304e9" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>nsq</name></member>
      <member refid="structfaiss_1_1Index_1a6970683faa021b7a6f1a0865c0d4eccd" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>ntotal</name></member>
      <member refid="structfaiss_1_1Index_1a23c23be6698f583402bde568eee00ad1" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>range_search</name></member>
      <member refid="structfaiss_1_1Index_1afaf9673009f9fe5a53ed6db522a5f69c" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>reconstruct</name></member>
      <member refid="structfaiss_1_1Index_1ae7c0b683e1fd5c8770ea2b3e1a82ce7f" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>reconstruct_n</name></member>
      <member refid="structfaiss_1_1Index_1ab70f7d0acb4a2f22857da3b17559ae82" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>remove_ids</name></member>
      <member refid="structfaiss_1_1IndexLattice_1a5282d7f60eecbd5f552f184944a36b06" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>reset</name></member>
      <member refid="structfaiss_1_1IndexLattice_1ac7c27786912bed039ef8d05a82db0acb" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>sa_code_size</name></member>
      <member refid="structfaiss_1_1IndexLattice_1a3fd27c778f435412336110785ba7124d" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>sa_decode</name></member>
      <member refid="structfaiss_1_1IndexLattice_1abbe02fd8270a854f7b25285d9a0a5752" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>sa_encode</name></member>
      <member refid="structfaiss_1_1IndexLattice_1aacf53ac36d93567b1e68505ea122e9bc" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>scale_nbit</name></member>
      <member refid="structfaiss_1_1IndexLattice_1a9631d430b912348e5e16277251dda5e7" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>search</name></member>
      <member refid="structfaiss_1_1Index_1a009874adf12440eb46396522ffd736cd" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>search_and_reconstruct</name></member>
      <member refid="structfaiss_1_1IndexLattice_1a19a6d0136b34d904d147f16922a64b93" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>train</name></member>
      <member refid="structfaiss_1_1IndexLattice_1aa3c7f1796a5c42bdb9891b2148e3e53f" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>trained</name></member>
      <member refid="structfaiss_1_1Index_1a5590d847c5c2b958affd2a05e58a6f23" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>verbose</name></member>
      <member refid="structfaiss_1_1IndexLattice_1adbe914419dc51e46b598d2c654a16f6a" prot="public" virt="non-virtual"><scope>faiss::IndexLattice</scope><name>zn_sphere_codec</name></member>
      <member refid="structfaiss_1_1Index_1a5fa7dbbb77a2a5c69b444672d2f1b982" prot="public" virt="virtual"><scope>faiss::IndexLattice</scope><name>~Index</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
