<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="hamming_8h" kind="file" language="C++">
    <compoundname>hamming.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">faiss/impl/platform_macros.h</includes>
    <includes refid="Heap_8h" local="no">faiss/utils/Heap.h</includes>
    <includes refid="hamming-inl_8h" local="no">faiss/utils/hamming-inl.h</includes>
    <incdepgraph>
      <node id="1288">
        <label>faiss/utils/hamming-inl.h</label>
        <link refid="hamming-inl_8h_source"/>
      </node>
      <node id="1286">
        <label>limits</label>
      </node>
      <node id="1279">
        <label>faiss/impl/platform_macros.h</label>
      </node>
      <node id="1278">
        <label>stdint.h</label>
      </node>
      <node id="1283">
        <label>cmath</label>
      </node>
      <node id="1284">
        <label>cassert</label>
      </node>
      <node id="1277">
        <label>faiss/utils/hamming.h</label>
        <link refid="hamming_8h"/>
        <childnode refid="1278" relation="include">
        </childnode>
        <childnode refid="1279" relation="include">
        </childnode>
        <childnode refid="1280" relation="include">
        </childnode>
        <childnode refid="1288" relation="include">
        </childnode>
      </node>
      <node id="1285">
        <label>cstdio</label>
      </node>
      <node id="1280">
        <label>faiss/utils/Heap.h</label>
        <link refid="Heap_8h_source"/>
        <childnode refid="1281" relation="include">
        </childnode>
        <childnode refid="1282" relation="include">
        </childnode>
        <childnode refid="1283" relation="include">
        </childnode>
        <childnode refid="1284" relation="include">
        </childnode>
        <childnode refid="1285" relation="include">
        </childnode>
        <childnode refid="1278" relation="include">
        </childnode>
        <childnode refid="1286" relation="include">
        </childnode>
        <childnode refid="1287" relation="include">
        </childnode>
      </node>
      <node id="1287">
        <label>faiss/utils/ordered_key_value.h</label>
        <link refid="ordered__key__value_8h_source"/>
        <childnode refid="1281" relation="include">
        </childnode>
        <childnode refid="1283" relation="include">
        </childnode>
        <childnode refid="1286" relation="include">
        </childnode>
      </node>
      <node id="1281">
        <label>climits</label>
      </node>
      <node id="1282">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innerclass refid="structfaiss_1_1BitstringWriter" prot="public">faiss::BitstringWriter</innerclass>
    <innerclass refid="structfaiss_1_1BitstringReader" prot="public">faiss::BitstringReader</innerclass>
    <innernamespace refid="namespacefaiss">faiss</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hamming_8h_1adda6c2c1c8de76ca0d91bd9302209db7" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t hamdis_t</definition>
        <argsstring></argsstring>
        <name>hamdis_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copyright (c) Facebook, Inc. and its affiliates.</para><para>This source code is licensed under the MIT license found in the LICENSE file in the root directory of this source tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="faiss/utils/hamming.h" line="35" column="1" bodyfile="faiss/utils/hamming.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Facebook,<sp/>Inc.<sp/>and<sp/>its<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-*-<sp/>c++<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Hamming<sp/>distances.<sp/>The<sp/>binary<sp/>vector<sp/>dimensionality<sp/>should<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>multiple<sp/>of<sp/>8,<sp/>as<sp/>the<sp/>elementary<sp/>operations<sp/>operate<sp/>on<sp/>bytes.<sp/>If</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>you<sp/>need<sp/>other<sp/>sizes,<sp/>just<sp/>pad<sp/>with<sp/>0s<sp/>(this<sp/>is<sp/>done<sp/>by<sp/>function</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>fvecs2bitvecs).</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>User-defined<sp/>type<sp/>hamdis_t<sp/>is<sp/>used<sp/>for<sp/>distances<sp/>because<sp/>at<sp/>this<sp/>time</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>it<sp/>is<sp/>still<sp/>uncler<sp/>clear<sp/>how<sp/>we<sp/>will<sp/>need<sp/>to<sp/>balance</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>-<sp/>flexibility<sp/>in<sp/>vector<sp/>size<sp/>(may<sp/>need<sp/>16-<sp/>or<sp/>even<sp/>8-bit<sp/>vectors)</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>-<sp/>memory<sp/>usage</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>-<sp/>cache-misses<sp/>when<sp/>dealing<sp/>with<sp/>large<sp/>volumes<sp/>of<sp/>data<sp/>(fewer<sp/>bits<sp/>is<sp/>better)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FAISS_hamming_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAISS_hamming_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/impl/platform_macros.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/utils/Heap.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>Hamming<sp/>distance<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int32_t<sp/>hamdis_t;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefaiss" kindref="compound">faiss</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/**************************************************</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>General<sp/>bit<sp/>vector<sp/>functions</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>**************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RangeSearchResult;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bitvec_print<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Functions<sp/>for<sp/>casting<sp/>vectors<sp/>of<sp/>regular<sp/>types<sp/>to<sp/>compact<sp/>bits.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/>They<sp/>assume<sp/>proper<sp/>allocation<sp/>done<sp/>beforehand,<sp/>meaning<sp/>that<sp/>b</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/>should<sp/>be<sp/>be<sp/>able<sp/>to<sp/>receive<sp/>as<sp/>many<sp/>bits<sp/>as<sp/>x<sp/>may<sp/>produce.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Makes<sp/>an<sp/>array<sp/>of<sp/>bits<sp/>from<sp/>the<sp/>signs<sp/>of<sp/>a<sp/>float<sp/>array.<sp/>The<sp/>length</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>of<sp/>the<sp/>output<sp/>array<sp/>b<sp/>is<sp/>rounded<sp/>up<sp/>to<sp/>byte<sp/>size<sp/>(allocate</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/>accordingly)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fvecs2bitvecs<sp/>(</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>x,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/>b,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bitvecs2fvecs<sp/>(</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>b,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>x,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fvec2bitvec<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>x,<sp/>uint8_t<sp/>*<sp/>b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">/**<sp/>Shuffle<sp/>the<sp/>bits<sp/>from<sp/>b(i,<sp/>j)<sp/>:=<sp/>a(i,<sp/>order[j])</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1a6ea3261fda6f9dc53c401b4cccb90268" kindref="member">bitvec_shuffle</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>da,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>db,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*order,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*a,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*b);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/***********************************************</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>Generic<sp/>reader/writer<sp/>for<sp/>bit<sp/>strings</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>***********************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structfaiss_1_1BitstringWriter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1BitstringWriter" kindref="compound">BitstringWriter</ref><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*code;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>code_size;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;<sp/></highlight><highlight class="comment">//<sp/>current<sp/>bit<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code_size<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1BitstringWriter" kindref="compound">BitstringWriter</ref>(uint8_t<sp/>*code,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>code_size);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>nbit<sp/>low<sp/>bits<sp/>of<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(uint64_t<sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbit);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structfaiss_1_1BitstringReader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1BitstringReader" kindref="compound">BitstringReader</ref><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*code;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>code_size;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code_size<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1BitstringReader" kindref="compound">BitstringReader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*code,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>code_size);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>nbit<sp/>bits<sp/>from<sp/>the<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>read(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbit);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/**************************************************</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>Hamming<sp/>distance<sp/>computation<sp/>functions</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>**************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">FAISS_API<sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hamming_batch_size;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>popcount64(uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__builtin_popcountl(x);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">/**<sp/>Compute<sp/>a<sp/>set<sp/>of<sp/>Hamming<sp/>distances<sp/>between<sp/>na<sp/>and<sp/>nb<sp/>binary<sp/>vectors</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/>a<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>na<sp/>*<sp/>nbytespercode</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/>b<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>nb<sp/>*<sp/>nbytespercode</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/>nbytespercode<sp/>should<sp/>be<sp/>multiple<sp/>of<sp/>8</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/>dis<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>distances,<sp/>size<sp/>na<sp/>*<sp/>nb</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1a0832c5ab58f4d1a340b0bde273c5b501" kindref="member">hammings</ref><sp/>(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>a,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>b,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>na,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytespercode,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hamdis_t<sp/>*<sp/>dis);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment">/**<sp/>Return<sp/>the<sp/>k<sp/>smallest<sp/>Hamming<sp/>distances<sp/>for<sp/>a<sp/>set<sp/>of<sp/>binary<sp/>query<sp/>vectors,</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>using<sp/>a<sp/>max<sp/>heap.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param<sp/>a<sp/><sp/><sp/><sp/><sp/><sp/><sp/>queries,<sp/>size<sp/>ha-&gt;nh<sp/>*<sp/>ncodes</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param<sp/>b<sp/><sp/><sp/><sp/><sp/><sp/><sp/>database,<sp/>size<sp/>nb<sp/>*<sp/>ncodes</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@param<sp/>nb<sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>database<sp/>vectors</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@param<sp/>ncodes<sp/><sp/>size<sp/>of<sp/>the<sp/>binary<sp/>codes<sp/>(bytes)</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@param<sp/>ordered<sp/>if<sp/>!=<sp/>0:<sp/>order<sp/>the<sp/>results<sp/>by<sp/>decreasing<sp/>distance</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(may<sp/>be<sp/>bottleneck<sp/>for<sp/>k/n<sp/>&gt;<sp/>0.01)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1a111b1ab3b50bcd06d29c588122811477" kindref="member">hammings_knn_hc</ref><sp/>(</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfaiss_1_1HeapArray" kindref="compound">int_maxheap_array_t</ref><sp/>*<sp/>ha,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>a,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>b,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ordered);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Legacy<sp/>alias<sp/>to<sp/>hammings_knn_hc.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hammings_knn<sp/>(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="structfaiss_1_1HeapArray" kindref="compound">int_maxheap_array_t</ref><sp/>*<sp/>ha,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>a,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>b,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ordered);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="162"><highlight class="comment">/**<sp/>Return<sp/>the<sp/>k<sp/>smallest<sp/>Hamming<sp/>distances<sp/>for<sp/>a<sp/>set<sp/>of<sp/>binary<sp/>query<sp/>vectors,</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>using<sp/>counting<sp/>max.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>@param<sp/>a<sp/><sp/><sp/><sp/><sp/><sp/><sp/>queries,<sp/>size<sp/>na<sp/>*<sp/>ncodes</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@param<sp/>b<sp/><sp/><sp/><sp/><sp/><sp/><sp/>database,<sp/>size<sp/>nb<sp/>*<sp/>ncodes</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>@param<sp/>na<sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>query<sp/>vectors</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@param<sp/>nb<sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>database<sp/>vectors</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@param<sp/>k<sp/><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>vectors/distances<sp/>to<sp/>return</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@param<sp/>ncodes<sp/><sp/>size<sp/>of<sp/>the<sp/>binary<sp/>codes<sp/>(bytes)</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@param<sp/>distances<sp/>output<sp/>distances<sp/>from<sp/>each<sp/>query<sp/>vector<sp/>to<sp/>its<sp/>k<sp/>nearest</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neighbors</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>@param<sp/>labels<sp/><sp/>output<sp/>ids<sp/>of<sp/>the<sp/>k<sp/>nearest<sp/>neighbors<sp/>to<sp/>each<sp/>query<sp/>vector</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1a7910c770df07bd8b6168ece7f5ff92ca" kindref="member">hammings_knn_mc</ref><sp/>(</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>a,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>b,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>na,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>int32_t<sp/>*distances,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>int64_t<sp/>*labels);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment">/**<sp/>same<sp/>as<sp/>hammings_knn<sp/>except<sp/>we<sp/>are<sp/>doing<sp/>a<sp/>range<sp/>search<sp/>with<sp/>radius<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefaiss_1a1032890ca79ab7443c0af4fde09b121c" kindref="member">hamming_range_search</ref><sp/>(</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>a,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>b,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>na,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radius,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>RangeSearchResult<sp/>*result);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Counting<sp/>the<sp/>number<sp/>of<sp/>matches<sp/>or<sp/>of<sp/>cross-matches<sp/>(without<sp/>returning<sp/>them)</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/>For<sp/>use<sp/>with<sp/>function<sp/>that<sp/>assume<sp/>pre-allocated<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hamming_count_thres<sp/>(</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>bs1,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>bs2,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n1,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n2,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hamdis_t<sp/>ht,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<sp/>nptr);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>all<sp/>Hamming<sp/>distances/index<sp/>passing<sp/>a<sp/>thres.<sp/>Pre-allocation<sp/>of<sp/>output</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/>is<sp/>required.<sp/>Use<sp/>hamming_count_thres<sp/>to<sp/>determine<sp/>the<sp/>proper<sp/>size.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>match_hamming_thres<sp/>(</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>bs1,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>bs2,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n1,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n2,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hamdis_t<sp/>ht,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>*<sp/>idx,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hamdis_t<sp/>*<sp/>dis);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Cross-matching<sp/>in<sp/>a<sp/>set<sp/>of<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>crosshamming_count_thres<sp/>(</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>dbs,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hamdis_t<sp/>ht,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ncodes,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*<sp/>nptr);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>Hamming<sp/>distances<sp/>between<sp/>two<sp/>codewords<sp/>of<sp/>nwords*64<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">hamdis_t<sp/>hamming<sp/>(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*<sp/>bs1,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*<sp/>bs2,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nwords);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>faiss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inlined<sp/>definitions<sp/>of<sp/>HammingComputerXX<sp/>and<sp/>GenHammingComputerXX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/utils/hamming-inl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FAISS_hamming_h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="faiss/utils/hamming.h"/>
  </compounddef>
</doxygen>
