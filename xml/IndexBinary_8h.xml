<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="IndexBinary_8h" kind="file" language="C++">
    <compoundname>IndexBinary.h</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes local="no">faiss/impl/FaissAssert.h</includes>
    <includes refid="Index_8h" local="no">faiss/Index.h</includes>
    <includedby refid="AutoTune_8h" local="no">faiss/AutoTune.h</includedby>
    <includedby refid="IndexBinaryFlat_8h" local="no">faiss/IndexBinaryFlat.h</includedby>
    <includedby refid="IndexReplicas_8h" local="no">faiss/IndexReplicas.h</includedby>
    <includedby refid="index__factory_8h" local="no">faiss/index_factory.h</includedby>
    <includedby refid="IndexBinaryFromFloat_8h" local="no">faiss/IndexBinaryFromFloat.h</includedby>
    <includedby refid="IndexBinaryHash_8h" local="no">faiss/IndexBinaryHash.h</includedby>
    <includedby refid="IndexBinaryIVF_8h" local="no">faiss/IndexBinaryIVF.h</includedby>
    <includedby refid="IndexShards_8h" local="no">faiss/IndexShards.h</includedby>
    <incdepgraph>
      <node id="539">
        <label>string</label>
      </node>
      <node id="541">
        <label>faiss/impl/FaissAssert.h</label>
      </node>
      <node id="538">
        <label>typeinfo</label>
      </node>
      <node id="537">
        <label>cstdio</label>
      </node>
      <node id="540">
        <label>sstream</label>
      </node>
      <node id="536">
        <label>faiss/IndexBinary.h</label>
        <link refid="IndexBinary_8h"/>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
      </node>
      <node id="542">
        <label>faiss/Index.h</label>
        <link refid="Index_8h_source"/>
        <childnode refid="543" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="543">
        <label>faiss/MetricType.h</label>
        <link refid="MetricType_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="557">
        <label>faiss/IndexShards.h</label>
        <link refid="IndexShards_8h_source"/>
        <childnode refid="553" relation="include">
        </childnode>
      </node>
      <node id="550">
        <label>faiss/IndexBinaryHNSW.h</label>
        <link refid="IndexBinaryHNSW_8h_source"/>
      </node>
      <node id="553">
        <label>faiss/MetaIndexes.h</label>
        <link refid="MetaIndexes_8h_source"/>
      </node>
      <node id="552">
        <label>faiss/gpu/perf/IndexWrapper.h</label>
        <link refid="IndexWrapper_8h_source"/>
      </node>
      <node id="545">
        <label>faiss/AutoTune.h</label>
        <link refid="AutoTune_8h_source"/>
        <childnode refid="546" relation="include">
        </childnode>
      </node>
      <node id="548">
        <label>faiss/gpu/GpuIndexBinaryFlat.h</label>
        <link refid="GpuIndexBinaryFlat_8h_source"/>
      </node>
      <node id="556">
        <label>faiss/IndexBinaryIVF.h</label>
        <link refid="IndexBinaryIVF_8h_source"/>
      </node>
      <node id="555">
        <label>faiss/IndexBinaryFromFloat.h</label>
        <link refid="IndexBinaryFromFloat_8h_source"/>
      </node>
      <node id="549">
        <label>faiss/IndexBinaryHash.h</label>
        <link refid="IndexBinaryHash_8h_source"/>
      </node>
      <node id="544">
        <label>faiss/IndexBinary.h</label>
        <link refid="IndexBinary_8h"/>
        <childnode refid="545" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="554" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
      </node>
      <node id="547">
        <label>faiss/IndexBinaryFlat.h</label>
        <link refid="IndexBinaryFlat_8h_source"/>
        <childnode refid="548" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="550" relation="include">
        </childnode>
      </node>
      <node id="551">
        <label>faiss/IndexReplicas.h</label>
        <link refid="IndexReplicas_8h_source"/>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
      </node>
      <node id="546">
        <label>faiss/gpu/GpuAutoTune.h</label>
        <link refid="GpuAutoTune_8h_source"/>
      </node>
      <node id="554">
        <label>faiss/index_factory.h</label>
        <link refid="index__factory_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structfaiss_1_1IndexBinary" prot="public">faiss::IndexBinary</innerclass>
    <innernamespace refid="namespacefaiss">faiss</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Facebook,<sp/>Inc.<sp/>and<sp/>its<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-*-<sp/>c++<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FAISS_INDEX_BINARY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAISS_INDEX_BINARY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/impl/FaissAssert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;faiss/Index.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefaiss" kindref="compound">faiss</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment">///<sp/>Forward<sp/>declarations<sp/>see<sp/>AuxIndexStructures.h</highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IDSelector;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RangeSearchResult;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment">/**<sp/>Abstract<sp/>structure<sp/>for<sp/>a<sp/>binary<sp/>index.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>Supports<sp/>adding<sp/>vertices<sp/>and<sp/>searching<sp/>them.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>All<sp/>queries<sp/>are<sp/>symmetric<sp/>because<sp/>there<sp/>is<sp/>no<sp/>distinction<sp/>between<sp/>codes<sp/>and</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>vectors.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="structfaiss_1_1IndexBinary" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref><sp/>{</highlight></codeline>
<codeline lineno="37" refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>=<sp/><ref refid="structfaiss_1_1Index_1ab64b96e821336c5b363d023386781d1d" kindref="member">Index::idx_t</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>all<sp/>indices<sp/>are<sp/>this<sp/>type</highlight></codeline>
<codeline lineno="38"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>component_t<sp/>=<sp/>uint8_t;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>distance_t<sp/>=<sp/>int32_t;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structfaiss_1_1IndexBinary_1a0e485a7189eec2675032486d3b12cf88" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a0e485a7189eec2675032486d3b12cf88" kindref="member">d</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>vector<sp/>dimension</highlight></codeline>
<codeline lineno="42" refid="structfaiss_1_1IndexBinary_1a277c2645b8def11c5d982384098c5380" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a277c2645b8def11c5d982384098c5380" kindref="member">code_size</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>number<sp/>of<sp/>bytes<sp/>per<sp/>vector<sp/>(<sp/>=<sp/>d<sp/>/<sp/>8<sp/>)</highlight></codeline>
<codeline lineno="43" refid="structfaiss_1_1IndexBinary_1a41b6759d127475d5fcd2b3982a8f355e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/><ref refid="structfaiss_1_1IndexBinary_1a41b6759d127475d5fcd2b3982a8f355e" kindref="member">ntotal</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>total<sp/>nb<sp/>of<sp/>indexed<sp/>vectors</highlight></codeline>
<codeline lineno="44" refid="structfaiss_1_1IndexBinary_1a1656c00d77d55999becd71e3d8ea6dd7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a1656c00d77d55999becd71e3d8ea6dd7" kindref="member">verbose</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>verbosity<sp/>level</highlight></codeline>
<codeline lineno="45"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/>///<sp/>set<sp/>if<sp/>the<sp/>Index<sp/>does<sp/>not<sp/>require<sp/>training,<sp/>or<sp/>if<sp/>training<sp/>is<sp/>done<sp/>already</highlight></codeline>
<codeline lineno="47" refid="structfaiss_1_1IndexBinary_1a132119ae93e240b54621c5c669853c7f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a132119ae93e240b54621c5c669853c7f" kindref="member">is_trained</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>///<sp/>type<sp/>of<sp/>metric<sp/>this<sp/>index<sp/>uses<sp/>for<sp/>search</highlight></codeline>
<codeline lineno="50" refid="structfaiss_1_1IndexBinary_1a344529c829717012b530ef9c13b145b7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref><sp/><ref refid="structfaiss_1_1IndexBinary_1a344529c829717012b530ef9c13b145b7" kindref="member">metric_type</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>d<sp/>=<sp/>0,<sp/><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752c" kindref="member">MetricType</ref><sp/>metric<sp/>=<sp/><ref refid="namespacefaiss_1afd12191c638da74760ff397cf319752cace9aa175fe11f346aa0a70df58977ff1" kindref="member">METRIC_L2</ref>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>d(d),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code_size(d<sp/>/<sp/>8),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ntotal(0),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbose(false),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_trained(true),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metric_type(metric)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FAISS_THROW_IF_NOT(d<sp/>%<sp/>8<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="structfaiss_1_1IndexBinary" kindref="compound">IndexBinary</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/>/**<sp/>Perform<sp/>training<sp/>on<sp/>a<sp/>representative<sp/>set<sp/>of<sp/>vectors.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>n<sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>of<sp/>training<sp/>vectors</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/>training<sp/>vecors,<sp/>size<sp/>n<sp/>*<sp/>d<sp/>/<sp/>8</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a3c0ffd1655d8a5486660cb025340c9a4" kindref="member">train</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*x);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/>/**<sp/>Add<sp/>n<sp/>vectors<sp/>of<sp/>dimension<sp/>d<sp/>to<sp/>the<sp/>index.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Vectors<sp/>are<sp/>implicitly<sp/>assigned<sp/>labels<sp/>ntotal<sp/>..<sp/>ntotal<sp/>+<sp/>n<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>matrix,<sp/>size<sp/>n<sp/>*<sp/>d<sp/>/<sp/>8</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1af04b1093cdebfea189e0e04da68794d7" kindref="member">add</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*x)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/>/**<sp/>Same<sp/>as<sp/>add,<sp/>but<sp/>stores<sp/>xids<sp/>instead<sp/>of<sp/>sequential<sp/>ids.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/>*<sp/>The<sp/>default<sp/>implementation<sp/>fails<sp/>with<sp/>an<sp/>assertion,<sp/>as<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/>*<sp/>not<sp/>supported<sp/>by<sp/>all<sp/>indexes.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>xids<sp/>if<sp/>non-null,<sp/>ids<sp/>to<sp/>store<sp/>for<sp/>the<sp/>vectors<sp/>(size<sp/>n)</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a33c74f55b919bf39138bb2ba60bbaafc" kindref="member">add_with_ids</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>*xids);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/>/**<sp/>Query<sp/>n<sp/>vectors<sp/>of<sp/>dimension<sp/>d<sp/>to<sp/>the<sp/>index.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/>*<sp/>return<sp/>at<sp/>most<sp/>k<sp/>vectors.<sp/>If<sp/>there<sp/>are<sp/>not<sp/>enough<sp/>results<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/>*<sp/>query,<sp/>the<sp/>result<sp/>array<sp/>is<sp/>padded<sp/>with<sp/>-1s.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>vectors<sp/>to<sp/>search,<sp/>size<sp/>n<sp/>*<sp/>d<sp/>/<sp/>8</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>labels<sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>labels<sp/>of<sp/>the<sp/>NNs,<sp/>size<sp/>n*k</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>distances<sp/><sp/><sp/>output<sp/>pairwise<sp/>distances,<sp/>size<sp/>n*k</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a48cdd06037d1fb8ce827e7522ba05fb8" kindref="member">search</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*x,<sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>k,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*distances,<sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>*labels)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/>/**<sp/>Query<sp/>n<sp/>vectors<sp/>of<sp/>dimension<sp/>d<sp/>to<sp/>the<sp/>index.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/>*<sp/>return<sp/>all<sp/>vectors<sp/>with<sp/>distance<sp/>&lt;<sp/>radius.<sp/>Note<sp/>that<sp/>many<sp/>indexes</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>*<sp/>do<sp/>not<sp/>implement<sp/>the<sp/>range_search<sp/>(only<sp/>the<sp/>k-NN<sp/>search<sp/>is</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>*<sp/>mandatory).<sp/>The<sp/>distances<sp/>are<sp/>converted<sp/>to<sp/>float<sp/>to<sp/>reuse<sp/>the</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/>*<sp/>RangeSearchResult<sp/>structure,<sp/>but<sp/>they<sp/>are<sp/>integer.<sp/>By<sp/>convention,</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/>*<sp/>only<sp/>distances<sp/>&lt;<sp/>radius<sp/>(strict<sp/>comparison)<sp/>are<sp/>returned,</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/>*<sp/>ie.<sp/>radius<sp/>=<sp/>0<sp/>does<sp/>not<sp/>return<sp/>any<sp/>result<sp/>and<sp/>1<sp/>returns<sp/>only</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/>*<sp/>exact<sp/>same<sp/>vectors.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>vectors<sp/>to<sp/>search,<sp/>size<sp/>n<sp/>*<sp/>d<sp/>/<sp/>8</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>radius<sp/><sp/><sp/><sp/><sp/><sp/>search<sp/>radius</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>table</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a35aedb48dd0270377f5602d61b783fd1" kindref="member">range_search</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radius,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RangeSearchResult<sp/>*result)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/>/**<sp/>Return<sp/>the<sp/>indexes<sp/>of<sp/>the<sp/>k<sp/>vectors<sp/>closest<sp/>to<sp/>the<sp/>query<sp/>x.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>is<sp/>identical<sp/>to<sp/>search<sp/>but<sp/>only<sp/>returns<sp/>labels<sp/>of<sp/>neighbors.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>x<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>vectors<sp/>to<sp/>search,<sp/>size<sp/>n<sp/>*<sp/>d<sp/>/<sp/>8</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>labels<sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>labels<sp/>of<sp/>the<sp/>NNs,<sp/>size<sp/>n*k</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1aa706d8807d29c91e0a148553a8202bc9" kindref="member">assign</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*x,<sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>*labels,<sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>k<sp/>=<sp/>1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/>///<sp/>Removes<sp/>all<sp/>elements<sp/>from<sp/>the<sp/>database.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a11bff8bcaa366c563076a3d18f3ae30c" kindref="member">reset</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/>/**<sp/>Removes<sp/>IDs<sp/>from<sp/>the<sp/>index.<sp/>Not<sp/>supported<sp/>by<sp/>all<sp/>indexes.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1a5ea7dee38e40f66b86d892bab2b6b80e" kindref="member">remove_ids</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IDSelector&amp;<sp/>sel);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/>/**<sp/>Reconstruct<sp/>a<sp/>stored<sp/>vector.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>may<sp/>not<sp/>be<sp/>defined<sp/>for<sp/>some<sp/>indexes.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>key<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>of<sp/>the<sp/>vector<sp/>to<sp/>reconstruct</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>recons<sp/><sp/><sp/><sp/><sp/><sp/>reconstucted<sp/>vector<sp/>(size<sp/>d<sp/>/<sp/>8)</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1ad4938acd1d31afd49c81fbb5211121c3" kindref="member">reconstruct</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>key,<sp/>uint8_t<sp/>*recons)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/>/**<sp/>Reconstruct<sp/>vectors<sp/>i0<sp/>to<sp/>i0<sp/>+<sp/>ni<sp/>-<sp/>1.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>may<sp/>not<sp/>be<sp/>defined<sp/>for<sp/>some<sp/>indexes.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>recons<sp/><sp/><sp/><sp/><sp/><sp/>reconstucted<sp/>vectors<sp/>(size<sp/>ni<sp/>*<sp/>d<sp/>/<sp/>8)</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1afbeb7aa476a119b17cbfdb87e9de91e4" kindref="member">reconstruct_n</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>i0,<sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>ni,<sp/>uint8_t<sp/>*recons)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/>/**<sp/>Similar<sp/>to<sp/>search,<sp/>but<sp/>also<sp/>reconstructs<sp/>the<sp/>stored<sp/>vectors<sp/>(or<sp/>an</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/>*<sp/>approximation<sp/>in<sp/>the<sp/>case<sp/>of<sp/>lossy<sp/>coding)<sp/>for<sp/>the<sp/>search<sp/>results.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>there<sp/>are<sp/>not<sp/>enough<sp/>results<sp/>for<sp/>a<sp/>query,<sp/>the<sp/>resulting<sp/>array</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>*<sp/>is<sp/>padded<sp/>with<sp/>-1s.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/>*<sp/>@param<sp/>recons<sp/><sp/><sp/><sp/><sp/><sp/>reconstructed<sp/>vectors<sp/>size<sp/>(n,<sp/>k,<sp/>d)</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1ae7a4b9bdbe6f4392d00cf4e44120409e" kindref="member">search_and_reconstruct</ref>(<ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*x,<sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>k,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*distances,<sp/><ref refid="structfaiss_1_1IndexBinary_1a01749bbdbd3b7ec6bb9390257ab16c5c" kindref="member">idx_t</ref><sp/>*labels,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*recons)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>/**<sp/>Display<sp/>the<sp/>actual<sp/>class<sp/>name<sp/>and<sp/>some<sp/>more<sp/>info.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structfaiss_1_1IndexBinary_1aa22c24398be85229e338b15ea9a0e3f1" kindref="member">display</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>faiss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>FAISS_INDEX_BINARY_H</highlight></codeline>
    </programlisting>
    <location file="faiss/IndexBinary.h"/>
  </compounddef>
</doxygen>
