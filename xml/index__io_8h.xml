<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="index__io_8h" kind="file" language="C++">
    <compoundname>index_io.h</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includedby refid="BlockInvertedLists_8h" local="no">faiss/invlists/BlockInvertedLists.h</includedby>
    <includedby refid="OnDiskInvertedLists_8h" local="no">faiss/invlists/OnDiskInvertedLists.h</includedby>
    <incdepgraph>
      <node id="531">
        <label>string</label>
      </node>
      <node id="530">
        <label>typeinfo</label>
      </node>
      <node id="529">
        <label>cstdio</label>
      </node>
      <node id="532">
        <label>vector</label>
      </node>
      <node id="528">
        <label>faiss/index_io.h</label>
        <link refid="index__io_8h"/>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="532" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="535">
        <label>faiss/invlists/OnDiskInvertedLists.h</label>
        <link refid="OnDiskInvertedLists_8h_source"/>
      </node>
      <node id="534">
        <label>faiss/invlists/BlockInvertedLists.h</label>
        <link refid="BlockInvertedLists_8h_source"/>
      </node>
      <node id="533">
        <label>faiss/index_io.h</label>
        <link refid="index__io_8h"/>
        <childnode refid="534" relation="include">
        </childnode>
        <childnode refid="535" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacefaiss">faiss</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>Facebook,<sp/>Inc.<sp/>and<sp/>its<sp/>affiliates.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>source<sp/>code<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>license<sp/>found<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LICENSE<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-*-<sp/>c++<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>I/O<sp/>code<sp/>for<sp/>indexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FAISS_INDEX_IO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAISS_INDEX_IO_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">/**<sp/>I/O<sp/>functions<sp/>can<sp/>read/write<sp/>to<sp/>a<sp/>filename,<sp/>a<sp/>file<sp/>handle<sp/>or<sp/>to<sp/>an</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>object<sp/>that<sp/>abstracts<sp/>the<sp/>medium.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>The<sp/>read<sp/>functions<sp/>return<sp/>objects<sp/>that<sp/>should<sp/>be<sp/>deallocated<sp/>with</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>delete.<sp/>All<sp/>references<sp/>within<sp/>these<sp/>objectes<sp/>are<sp/>owned<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>object.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefaiss" kindref="compound">faiss</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Index;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IndexBinary;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VectorTransform;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ProductQuantizer;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IOReader;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IOWriter;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InvertedLists;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_index<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Index<sp/>*idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_index<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Index<sp/>*idx,<sp/>FILE<sp/>*f);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_index<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Index<sp/>*idx,<sp/>IOWriter<sp/>*writer);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_index_binary<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexBinary<sp/>*idx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_index_binary<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexBinary<sp/>*idx,<sp/>FILE<sp/>*f);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_index_binary<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IndexBinary<sp/>*idx,<sp/>IOWriter<sp/>*writer);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>read_index<sp/>flags<sp/>are<sp/>implemented<sp/>only<sp/>for<sp/>a<sp/>subset<sp/>of<sp/>index<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IO_FLAG_READ_ONLY<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>strip<sp/>directory<sp/>component<sp/>from<sp/>ondisk<sp/>filename,<sp/>and<sp/>assume<sp/>it&apos;s<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>directory<sp/>as<sp/>the<sp/>index<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IO_FLAG_ONDISK_SAME_DIR<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>load<sp/>IVF<sp/>data<sp/>to<sp/>RAM,<sp/>only<sp/>list<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IO_FLAG_SKIP_IVF_DATA<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>memmap<sp/>data<sp/>(useful<sp/>to<sp/>load<sp/>an<sp/>ArrayInvertedLists<sp/>as<sp/>an<sp/>OnDiskInvertedLists)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IO_FLAG_MMAP<sp/>=<sp/>IO_FLAG_SKIP_IVF_DATA<sp/>|<sp/>0x646f0000;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">Index<sp/>*read_index<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>io_flags<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">Index<sp/>*read_index<sp/>(FILE<sp/>*<sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>io_flags<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">Index<sp/>*read_index<sp/>(IOReader<sp/>*reader,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>io_flags<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">IndexBinary<sp/>*read_index_binary<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>io_flags<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">IndexBinary<sp/>*read_index_binary<sp/>(FILE<sp/>*<sp/>f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>io_flags<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">IndexBinary<sp/>*read_index_binary<sp/>(IOReader<sp/>*reader,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>io_flags<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_VectorTransform<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorTransform<sp/>*vt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">VectorTransform<sp/>*read_VectorTransform<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">ProductQuantizer<sp/>*<sp/>read_ProductQuantizer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*fname);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">ProductQuantizer<sp/>*<sp/>read_ProductQuantizer<sp/>(IOReader<sp/>*reader);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_ProductQuantizer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ProductQuantizer*pq,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fname);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_ProductQuantizer<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ProductQuantizer*pq,<sp/>IOWriter<sp/>*f);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_InvertedLists<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InvertedLists<sp/>*ils,<sp/>IOWriter<sp/>*f);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">InvertedLists<sp/>*read_InvertedLists<sp/>(IOReader<sp/>*reader,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>io_flags<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>faiss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="faiss/index_io.h"/>
  </compounddef>
</doxygen>
